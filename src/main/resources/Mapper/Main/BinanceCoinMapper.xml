<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.diff._private.Mapper.Main.BinanceCoinMapper">
	<select id="MainGridList" resultType="HashMap" parameterType="HashMap">
		select x.coin_ticker id, x.gijun_date, x.coin_kor_name, x.coin_eng_name, x.max_price, x.min_price, x.max_date, x.min_date, x.o_price, x.c_price, x.l_price, x.h_price, x.trade_volume
			 , coalesce(x.o_c_price_rate_5_date, '') o_c_price_rate_5_date, coalesce(x.o_c_price_rate_10_date, '') o_c_price_rate_10_date, coalesce(x.o_c_price_rate_15_date, '') o_c_price_rate_15_date
	 		 , coalesce(x.o_c_price_rate_20_date, '') o_c_price_rate_20_date, coalesce(x.o_c_price_rate_25_date, '') o_c_price_rate_25_date, coalesce(x.o_c_price_rate_30_date, '') o_c_price_rate_30_date
	 		 , coalesce(cast(x.o_c_price_rate_5_count as varchar), '0') o_c_price_rate_5_count, coalesce(cast(x.o_c_price_rate_10_count as varchar), '0') o_c_price_rate_10_count, coalesce(cast(x.o_c_price_rate_15_count as varchar), '0') o_c_price_rate_15_count
	 		 , coalesce(cast(x.o_c_price_rate_20_count as varchar), '0') o_c_price_rate_20_count, coalesce(cast(x.o_c_price_rate_25_count as varchar), '0') o_c_price_rate_25_count, coalesce(cast(x.o_c_price_rate_30_count as varchar), '0') o_c_price_rate_30_count
			 , cast((ROUND(((cast(x.c_price as numeric)-cast(x.o_price as numeric))/cast(x.o_price as numeric))*100,1)) as varchar) open_close_rate
			 , cast(ROUND(((((cast(x.max_price as numeric) - cast(x.min_price as numeric))/ cast(x.min_price as numeric))) * 100), 1) as varchar) lowest_highest_fluctuation
			 , cast(ROUND((((cast(x.c_price as numeric) / (cast(x.min_price as numeric) + cast(x.max_price as numeric)))) * 100), 1) as varchar) highest_lowest_100per
			 , cast((ROUND(((((cast(x.max_price as numeric) - cast(x.c_price as numeric)) / cast(x.max_price as numeric))) * 100), 1)) as varchar) highest_decline_rate
			 , cast((ROUND(((((cast(x.c_price as numeric) - cast(x.min_price as numeric)) / cast(x.min_price as numeric))) * 100), 1)) as varchar) lowest_rise_rate
		  from (
				select replace(x.coin_ticker, 'USDT', '') coin_ticker, y.coin_kor_name, y.coin_eng_name
					 , coalesce((select max(replace(a.datetime_kst, ' 09:00:00', '')) 
					 			   from binance_coin_day a 
					 			  where a.coin_ticker = x.coin_ticker 
				 			     <if test='std_date != null and std_date != "" '>
									and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
								 </if>
								 <if test='end_date != null and end_date != "" '>
									and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
								 </if>
					 			    and a.l_price = cast(min(cast(x.l_price as numeric)) as varchar)), '') min_date
			 		 , coalesce((select max(replace(a.datetime_kst, ' 09:00:00', '')) 
			 		 			   from binance_coin_day a 
			 		 			  where a.coin_ticker = x.coin_ticker
			 		 			  <if test='std_date != null and std_date != "" '>
									and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
								  </if>
								  <if test='end_date != null and end_date != "" '>
									and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
								  </if>
			 		 			    and a.h_price = cast(max(cast(x.h_price as numeric)) as varchar)), '') max_date
					 , case when position('.0' in cast(min(cast(x.l_price as numeric)) as varchar)) > (char_length(cast(min(cast(x.l_price as numeric)) as varchar))-2) then replace((cast(min(cast(x.l_price as numeric)) as varchar)), '.0', '') else cast(min(cast(x.l_price as numeric)) as varchar) end  min_price
					 , case when position('.0' in cast(max(cast(x.h_price as numeric)) as varchar)) > (char_length(cast(max(cast(x.h_price as numeric)) as varchar))-2) then replace((cast(max(cast(x.h_price as numeric)) as varchar)), '.0', '') else cast(max(cast(x.h_price as numeric)) as varchar) end  max_price
		             , (select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
		             	  from binance_coin_day z 
		             	 where x.coin_ticker = z.coin_ticker 
		             	 <if test='std_date != null and std_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
		             	 order by z.datetime_kst desc 
		             	 limit 1) c_price
		             , (select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
		                  from binance_coin_day z 
		                 where x.coin_ticker = z.coin_ticker 
		                 <if test='std_date != null and std_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
		                 order by z.datetime_kst asc 
		                 limit 1) o_price
					 , (select case when position('.0' in cast(min(cast(z.l_price as numeric)) as varchar)) > (char_length(cast(min(cast(z.l_price as numeric)) as varchar))-2) then replace(cast(min(cast(z.l_price as numeric)) as varchar), '.0', '') else cast(min(cast(z.l_price as numeric)) as varchar) end 
					 	  from binance_coin_day z
					 	 where x.coin_ticker = z.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	 limit 1) l_price
		     		 , (select case when position('.0' in cast(max(cast(z.h_price as numeric)) as varchar)) > (char_length(cast(max(cast(z.h_price as numeric)) as varchar))-2) then replace(cast(max(cast(z.h_price as numeric)) as varchar), '.0', '') else cast(max(cast(z.h_price as numeric)) as varchar) end 
		     		 	  from binance_coin_day z 
		     		 	 where x.coin_ticker = z.coin_ticker 
		     		 	 <if test='std_date != null and std_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
		     		 	 limit 1) h_price
		 			 , (select replace(a.datetime_kst, ' 09:00:00', '') 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	 order by a.datetime_kst desc 
					 	 limit 1) gijun_date
					 , (select replace(a.datetime_kst, ' 09:00:00', '') 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 5 
					 	 order by a.datetime_kst desc limit 1) o_c_price_rate_5_date
					 , (select replace(a.datetime_kst, ' 09:00:00', '') 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 10 
					 	 order by a.datetime_kst desc limit 1) o_c_price_rate_10_date
					 , (select replace(a.datetime_kst, ' 09:00:00', '') 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 15 
					 	 order by a.datetime_kst desc limit 1) o_c_price_rate_15_date
					 , (select replace(a.datetime_kst, ' 09:00:00', '') 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 20 
					 	 order by a.datetime_kst desc limit 1) o_c_price_rate_20_date
					 , (select replace(a.datetime_kst, ' 09:00:00', '') 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 25 
					 	 order by a.datetime_kst desc limit 1) o_c_price_rate_25_date
					 , (select replace(a.datetime_kst, ' 09:00:00', '') 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 30 
					 	 order by a.datetime_kst desc limit 1) o_c_price_rate_30_date
					 , (select count(*) 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 5) o_c_price_rate_5_count
					 , (select count(*) 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 10) o_c_price_rate_10_count
					 , (select count(*) 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 15) o_c_price_rate_15_count
					 , (select count(*) 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 20) o_c_price_rate_20_count
					 , (select count(*) 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 25) o_c_price_rate_25_count
					 , (select count(*) 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 30) o_c_price_rate_30_count
					 , (select case when cast(trade_volume as numeric) > 100000000000 then cast(ROUND((cast(trade_volume as numeric)/1000000000)) as varchar) || 'B'
						 			when cast(trade_volume as numeric) > 10000000000 then cast(ROUND((cast(trade_volume as numeric)/1000000000), 1) as varchar) || 'B'
						 			when cast(trade_volume as numeric) > 1000000000 then cast(ROUND((cast(trade_volume as numeric)/1000000000), 2) as varchar) || 'B'
						 			when cast(trade_volume as numeric) > 100000000 then cast(ROUND((cast(trade_volume as numeric)/1000000)) as varchar) || 'M'
						 			when cast(trade_volume as numeric) > 10000000 then cast(ROUND((cast(trade_volume as numeric)/1000000), 1) as varchar) || 'M'
									when cast(trade_volume as numeric) > 1000000 then cast(ROUND((cast(trade_volume as numeric)/1000000), 2) as varchar) || 'M'
									when cast(trade_volume as numeric) > 100000 then cast(ROUND((cast(trade_volume as numeric)/1000)) as varchar) || 'K'
									when cast(trade_volume as numeric) > 10000 then cast(ROUND((cast(trade_volume as numeric)/1000), 1) as varchar) || 'K'
								    else cast(ROUND((cast(trade_volume as numeric)/1000), 2) as varchar) || 'K' end 
						  from binance_coin_day z 
						 where x.coin_ticker = z.coin_ticker 
						 <if test='std_date != null and std_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
						 order by z.datetime_kst desc limit 1)  trade_volume
				  from binance_coin_day x, binance_coin_info y
				 where x.coin_ticker = y.coin_ticker
				   and y.coin_delete_yn = 'N'
				 <if test='std_date != null and std_date != "" '>
					and left(x.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
				 </if>
				 <if test='end_date != null and end_date != "" '>
					and left(x.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
				 </if>
				 group by x.coin_ticker, y.coin_kor_name, y.coin_eng_name
		 	   ) x
		  order by cast(x.c_price as numeric) desc
	</select>

	<select id="CoinInfo" resultType="HashMap">
		select x.coin_ticker, x.coin_kor_name, x.coin_eng_name, y.datetime_kst
			 , case when position('.0' in y.c_price) > (char_length(y.c_price)-2) then replace(y.c_price, '.0', '') else c_price end c_price 
		  from binance_coin_info x
		  	 , (select y.coin_ticker, max(y.datetime_kst) datetime_kst
		  	 		 , (select cast(z.c_price as varchar) from binance_coin_min z where y.coin_ticker = z.coin_ticker and max(y.datetime_kst) = z.datetime_kst) c_price
		  	 	  from binance_coin_min y
		  	 	 group by y.coin_ticker) y
		 where x.coin_delete_yn = 'N'
		   and x.coin_ticker = y.coin_ticker
		 order by cast(y.c_price as numeric) desc
	</select>
	
	<select id="CoinDailyReportList" resultType="HashMap" parameterType="HashMap">
		select x.yyyymmdd, x.coin_ticker, y.coin_kor_name, y.coin_eng_name, x.ranking, x.status 
			 , case when coalesce(y.coin_kor_name, '') != '' then (y.coin_kor_name || ' [' || replace(y.coin_ticker, 'USDT', '') || ']') 
			        when coalesce(y.coin_eng_name, '') != '' then (y.coin_eng_name || ' [' || replace(y.coin_ticker, 'USDT', '') || ']') 
			        else '[' || replace(y.coin_ticker, 'USDT', '') || ']' end coin_title
			 , x.o_price, x.l_price, x.h_price, x.c_price
			 , x.o_c_price, x.o_c_price_rate, x.l_h_price, x.l_h_price_rate, x.real_l_h_price, x.real_l_h_price_rate
			 , x.lower_price_time, x.higher_price_time, x.lower_volume_time, x.higher_volume_time
			 , x.o_0_4, x.l_0_4, x.h_0_4, x.c_0_4, x.v_0_4
			 , x.o_4_8, x.l_4_8, x.h_4_8, x.c_4_8, x.v_4_8
			 , x.o_8_12, x.l_8_12, x.h_8_12, x.c_8_12, x.v_8_12
			 , x.o_12_16, x.l_12_16, x.h_12_16, x.c_12_16, x.v_12_16
			 , x.o_16_20, x.l_16_20, x.h_16_20, x.c_16_20, x.v_16_20
			 , x.o_20_24, x.l_20_24, x.h_20_24, x.c_20_24, x.v_20_24
			 , x.complete_yn, x.delete_yn
			 , coalesce((select ranking from binance_coin_report_daily z where x.coin_ticker=z.coin_ticker and yyyymmdd = #{yesterday}), '') yesterday_ranking
			 , coalesce((select o_c_price_rate from binance_coin_report_daily z where x.coin_ticker=z.coin_ticker and yyyymmdd = #{yesterday}), '0.0') yesterday_o_c_price_rate
		  from binance_coin_report_daily x, binance_coin_info y
		 where x.coin_ticker = y.coin_ticker
		   and x.delete_yn = 'N'
		   and y.coin_delete_yn = 'N'
		   and x.yyyymmdd = #{date}
		   and x.o_price is not null and x.l_price is not null and x.h_price is not null and x.c_price is not null
		 order by case when x.coin_ticker = 'BTCUSDT' then 0 else cast(x.ranking as integer) end
	</select>
	
	<delete id="CoinAnalysisDelete" parameterType="HashMap">
		delete from binance_coin_report_daily where yyyymmdd = #{date}
	</delete>
	
	<insert id="CoinAnalysisCreate" parameterType="HashMap">
		insert into binance_coin_report_daily
			(yyyymmdd, coin_ticker, o_price, l_price, h_price, c_price, ranking, status, o_c_price, o_c_price_rate, l_h_price, l_h_price_rate
				, lower_price_time, higher_price_time, lower_volume_time, higher_volume_time, create_datetime
				, o_0_4, l_0_4, h_0_4, c_0_4, v_0_4, o_4_8, l_4_8, h_4_8, c_4_8, v_4_8, o_8_12, l_8_12, h_8_12, c_8_12, v_8_12
				, o_12_16, l_12_16, h_12_16, c_12_16, v_12_16, o_16_20, l_16_20, h_16_20, c_16_20, v_16_20, o_20_24, l_20_24, h_20_24, c_20_24, v_20_24)
		select #{date} yyyymmdd, x.coin_ticker, x.o_price, x.l_price, x.h_price, x.c_price, x.ranking, x.status
			 , x.o_c_price, x.o_c_price_rate, x.l_h_price, x.l_h_price_rate
			 , x.lower_time, x.higher_time, x.volum_low_time, x.volum_high_time, to_char(now(), 'YYYY-MM-DD HH24:MI:SS')
			 , x.o_price_0_4, x.l_price_0_4, x.h_price_0_4, x.c_price_0_4, x.trade_volume_0_4
			 , x.o_price_4_8, x.l_price_4_8, x.h_price_4_8, x.c_price_4_8, x.trade_volume_4_8
			 , x.o_price_8_12, x.l_price_8_12, x.h_price_8_12, x.c_price_8_12, x.trade_volume_8_12
			 , x.o_price_12_16, x.l_price_12_16, x.h_price_12_16, x.c_price_12_16, x.trade_volume_12_16
			 , x.o_price_16_20, x.l_price_16_20, x.h_price_16_20, x.c_price_16_20, x.trade_volume_16_20
			 , x.o_price_20_24, x.l_price_20_24, x.h_price_20_24, x.c_price_20_24, x.trade_volume_20_24
		  from (
				select x.coin_ticker, x.o_price, x.c_price, x.l_price, x.h_price, '기준' AS ranking
					 , case when cast(x.c_price as numeric) > cast(x.o_price as numeric) then '상승' when cast(x.c_price as numeric) <![CDATA[ < ]]> cast(x.o_price as numeric) then '하락' else '보합' end status
					 , cast((cast(x.c_price as numeric) - cast(x.o_price as numeric)) as varchar) o_c_price
					 , cast((ROUND(((cast(x.c_price as numeric)-cast(x.o_price as numeric))/cast(x.o_price as numeric))*100,2)) as varchar) o_c_price_rate
					 , cast((cast(x.h_price as numeric) - cast(x.l_price as numeric)) as varchar) l_h_price
					 , cast((ROUND(((cast(x.h_price as numeric)-cast(x.l_price as numeric))/cast(x.l_price as numeric))*100,2)) as varchar) l_h_price_rate
					 , x.lower_time, x.higher_time, x.volum_low_time, x.volum_high_time
					 , x.o_price_0_4, x.l_price_0_4, x.h_price_0_4, x.c_price_0_4, x.trade_volume_0_4
					 , x.o_price_4_8, x.l_price_4_8, x.h_price_4_8, x.c_price_4_8, x.trade_volume_4_8
					 , x.o_price_8_12, x.l_price_8_12, x.h_price_8_12, x.c_price_8_12, x.trade_volume_8_12
					 , x.o_price_12_16, x.l_price_12_16, x.h_price_12_16, x.c_price_12_16, x.trade_volume_12_16
					 , x.o_price_16_20, x.l_price_16_20, x.h_price_16_20, x.c_price_16_20, x.trade_volume_16_20
					 , x.o_price_20_24, x.l_price_20_24, x.h_price_20_24, x.c_price_20_24, x.trade_volume_20_24
				  from (
					select x.coin_ticker
						 , (select case when position('.0' in cast(cast(m.o_price as numeric) as varchar)) > (char_length(cast(cast(m.o_price as numeric) as varchar))-2) then replace((cast(cast(m.o_price as numeric) as varchar)), '.0', '') else cast(cast(m.o_price as numeric) as varchar) end from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} order by m.datetime_utc asc limit 1) o_price
						 , (select case when position('.0' in cast(cast(m.c_price as numeric) as varchar)) > (char_length(cast(cast(m.c_price as numeric) as varchar))-2) then replace((cast(cast(m.c_price as numeric) as varchar)), '.0', '') else cast(cast(m.c_price as numeric) as varchar) end from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} order by m.datetime_utc desc limit 1) c_price
						 , (select case when position('.0' in cast(cast(m.l_price as numeric) as varchar)) > (char_length(cast(cast(m.l_price as numeric) as varchar))-2) then replace((cast(cast(m.l_price as numeric) as varchar)), '.0', '') else cast(cast(m.l_price as numeric) as varchar) end from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} order by cast(m.l_price as numeric) limit 1) l_price
						 , (select case when position('.0' in cast(cast(m.h_price as numeric) as varchar)) > (char_length(cast(cast(m.h_price as numeric) as varchar))-2) then replace((cast(cast(m.h_price as numeric) as varchar)), '.0', '') else cast(cast(m.h_price as numeric) as varchar) end from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} order by cast(m.h_price as numeric) desc limit 1) h_price
						 , (select substring(m.datetime_kst, 12, 5) from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} order by cast(m.l_price as numeric) limit 1) lower_time
						 , (select substring(m.datetime_kst, 12, 5) from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} order by cast(m.h_price as numeric) desc limit 1) higher_time
						 , (select cast(cast(substring(m.datetime_kst, 12, 2) as integer) as varchar)||'시' from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} group by substring(m.datetime_kst, 12, 2) order by sum(cast(m.trade_volume as numeric)) asc limit 1) volum_low_time
						 , (select cast(cast(substring(m.datetime_kst, 12, 2) as integer) as varchar)||'시' from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} group by substring(m.datetime_kst, 12, 2) order by sum(cast(m.trade_volume as numeric)) desc limit 1) volum_high_time
						 , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
						       	       from binance_coin_min z 
						       	      where z.coin_ticker = x.coin_ticker
						       	        and left(z.datetime_utc, 10) = #{date}
						       	        and cast(substring(z.datetime_utc, 12,2) as integer) >= 0 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4
						       	      order by z.datetime_utc 
						     	      limit 1), '0') o_price_0_4
				          , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
						          	    from binance_coin_min z 
						          	   where z.coin_ticker = x.coin_ticker
						       	        and left(z.datetime_utc, 10) = #{date}
						       	        and cast(substring(z.datetime_utc, 12,2) as integer) >= 4 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8
						       	      order by z.datetime_utc 
						        	   limit 1), '0') o_price_4_8
				          , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
						          	    from binance_coin_min z 
						          	   where z.coin_ticker = x.coin_ticker
						          	     and left(z.datetime_utc, 10) = #{date}
						          	     and cast(substring(z.datetime_utc, 12,2) as integer) >= 8 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12
						          	   order by z.datetime_utc 
						        	   limit 1), '0') o_price_8_12
				          , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
						          	    from binance_coin_min z 
						          	   where z.coin_ticker = x.coin_ticker
						       	        and left(z.datetime_utc, 10) = #{date}
						       	        and cast(substring(z.datetime_utc, 12,2) as integer) >= 12 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16
						       	      order by z.datetime_utc 
						     	      limit 1), '0') o_price_12_16
				          , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
						          	    from binance_coin_min z 
						          	   where z.coin_ticker = x.coin_ticker
						          	     and left(z.datetime_utc, 10) = #{date}
						          	     and cast(substring(z.datetime_utc, 12,2) as integer) >= 16 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20
						          	   order by z.datetime_utc 
						        	   limit 1), '0') o_price_16_20
				          , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
						       	       from binance_coin_min z 
						       	      where z.coin_ticker = x.coin_ticker
						       	        and left(z.datetime_utc, 10) = #{date}
						       	        and cast(substring(z.datetime_utc, 12,2) as integer) >= 20 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24
						       	      order by z.datetime_utc 
						        	   limit 1), '0') o_price_20_24
				          , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
						          	    from binance_coin_min z 
						          	   where z.coin_ticker = x.coin_ticker
						          	     and left(z.datetime_utc, 10) = #{date}
						          	     and cast(substring(z.datetime_utc, 12,2) as integer) >= 0 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4
						          	   order by z.datetime_utc desc 
						        	   limit 1), '0') c_price_0_4
				          , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
						          	    from binance_coin_min z 
						          	   where z.coin_ticker = x.coin_ticker
						          	     and left(z.datetime_utc, 10) = #{date}
						       	        and cast(substring(z.datetime_utc, 12,2) as integer) >= 4 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8
						          	   order by z.datetime_utc desc 
						     	       limit 1), '0') c_price_4_8
				          , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
						       	        from binance_coin_min z 
						       	       where z.coin_ticker = x.coin_ticker
						       	         and left(z.datetime_utc, 10) = #{date}
						       	         and cast(substring(z.datetime_utc, 12,2) as integer) >= 8 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12
						       	       order by z.datetime_utc desc 
						     	       limit 1), '0') c_price_8_12
				          , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
						       	        from binance_coin_min z 
						       	       where z.coin_ticker = x.coin_ticker
						           	     and left(z.datetime_utc, 10) = #{date}
						           	     and cast(substring(z.datetime_utc, 12,2) as integer) >= 12 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16
						       	       order by z.datetime_utc desc 
						         	   limit 1), '0') c_price_12_16
				           , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
						           	    from binance_coin_min z 
						       	       where z.coin_ticker = x.coin_ticker
						           	     and left(z.datetime_utc, 10) = #{date}
						       	         and cast(substring(z.datetime_utc, 12,2) as integer) >= 16 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20
						       	       order by z.datetime_utc desc 
						     	       limit 1), '0') c_price_16_20
				           , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
						       	        from binance_coin_min z 
						       	       where z.coin_ticker = x.coin_ticker
						       	         and left(z.datetime_utc, 10) = #{date}
						       	         and cast(substring(z.datetime_utc, 12,2) as integer) >= 20 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24
						       	       order by z.datetime_utc desc 
						     	       limit 1), '0') c_price_20_24
				           , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end
						           	     from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 0 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4
						           	    order by cast(z.h_price as numeric) desc
						     	        limit 1), '0') h_price_0_4 
				           , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 4 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8
						       	        order by cast(z.h_price as numeric) desc
						     	        limit 1), '0') h_price_4_8
				           , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end 
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 8 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12
						       	        order by cast(z.h_price as numeric) desc
						     	        limit 1), '0') h_price_8_12
				           , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end 
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 12 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16
						       	        order by cast(z.h_price as numeric) desc
						     	        limit 1), '0') h_price_12_16
				           , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end 
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 16 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20
						       	        order by cast(z.h_price as numeric) desc
						     	        limit 1), '0') h_price_16_20
				           , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end 
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 20 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24
						       	        order by cast(z.h_price as numeric) desc
						     	        limit 1), '0') h_price_20_24
				           , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end 
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 0 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4
						       	        order by cast(z.l_price as numeric) asc
						     	        limit 1), '0') l_price_0_4
				           , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end
						           	     from binance_coin_min z 
						           	    where z.coin_ticker = x.coin_ticker
						           	      and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 4 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8
						       	        order by cast(z.l_price as numeric) asc
						     	        limit 1), '0') l_price_4_8
				           , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 8 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12
						       	        order by cast(z.l_price as numeric) asc
						     	        limit 1), '0') l_price_8_12
				           , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 12 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16
						       	        order by cast(z.l_price as numeric) asc
						     	        limit 1), '0') l_price_12_16
				           , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 16 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20
						       	        order by cast(z.l_price as numeric) asc
						     	        limit 1), '0') l_price_16_20
				           , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 20 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24
						       	        order by cast(z.l_price as numeric) asc
						     	        limit 1), '0') l_price_20_24
				           , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 0 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4
						       	        group by z.datetime_utc, z.datetime_kst
						     	        order by z.datetime_utc desc
						     	        limit 1), '0') trade_volume_0_4
				           , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						           	      and cast(substring(z.datetime_utc, 12,2) as integer) >= 4 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8
						       	        group by z.datetime_utc, z.datetime_kst
						     	        order by z.datetime_utc desc
						     	        limit 1), '0') trade_volume_4_8
				           , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
						           	     from binance_coin_min z 
						           	    where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 8 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12
						       	        group by z.datetime_utc, z.datetime_kst
						     	        order by z.datetime_utc desc
						     	        limit 1), '0') trade_volume_8_12
				           , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 12 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16
						       	        group by z.datetime_utc, z.datetime_kst
						     	        order by z.datetime_utc desc
						     	        limit 1), '0') trade_volume_12_16
				           , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 16 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20
						       	        group by z.datetime_utc, z.datetime_kst
						     	        order by z.datetime_utc desc
						     	        limit 1), '0') trade_volume_16_20
				           , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 20 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24
						       	        group by z.datetime_utc, z.datetime_kst
						     	        order by z.datetime_utc desc
						     	        limit 1), '0') trade_volume_20_24
					  from binance_coin_info x
					 where x.coin_ticker = 'BTCUSDT'
					   and x.coin_delete_yn = 'N'
				) x
				union all 
				select x.coin_ticker, x.o_price, x.c_price, x.l_price, x.h_price
					 , cast(ROW_NUMBER() OVER (ORDER BY ROUND(((cast(x.c_price as numeric)-cast(x.o_price as numeric))/cast(x.o_price as numeric))*100,2) desc) as varchar) AS ranking
					 , case when cast(x.c_price as numeric) > cast(x.o_price as numeric) then '상승' when cast(x.c_price as numeric) <![CDATA[ < ]]> cast(x.o_price as numeric) then '하락' else '보합' end status
					 , cast((cast(x.c_price as numeric) - cast(x.o_price as numeric)) as varchar) o_c_price
					 , cast((ROUND(((cast(x.c_price as numeric)-cast(x.o_price as numeric))/cast(x.o_price as numeric))*100,2)) as varchar) o_c_price_rate
					 , cast((cast(x.h_price as numeric) - cast(x.l_price as numeric)) as varchar) l_h_price
					 , cast((ROUND(((cast(x.h_price as numeric)-cast(x.l_price as numeric))/cast(x.l_price as numeric))*100,2)) as varchar) l_h_price_rate
					 , x.lower_time, x.higher_time, x.volum_low_time, x.volum_high_time
					 , x.o_price_0_4, x.l_price_0_4, x.h_price_0_4, x.c_price_0_4, x.trade_volume_0_4
					 , x.o_price_4_8, x.l_price_4_8, x.h_price_4_8, x.c_price_4_8, x.trade_volume_4_8
					 , x.o_price_8_12, x.l_price_8_12, x.h_price_8_12, x.c_price_8_12, x.trade_volume_8_12
					 , x.o_price_12_16, x.l_price_12_16, x.h_price_12_16, x.c_price_12_16, x.trade_volume_12_16
					 , x.o_price_16_20, x.l_price_16_20, x.h_price_16_20, x.c_price_16_20, x.trade_volume_16_20
					 , x.o_price_20_24, x.l_price_20_24, x.h_price_20_24, x.c_price_20_24, x.trade_volume_20_24
				  from (
					select x.coin_ticker
						 , (select case when position('.0' in cast(cast(m.o_price as numeric) as varchar)) > (char_length(cast(cast(m.o_price as numeric) as varchar))-2) then replace((cast(cast(m.o_price as numeric) as varchar)), '.0', '') else cast(cast(m.o_price as numeric) as varchar) end from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} order by m.datetime_utc asc limit 1) o_price
						 , (select case when position('.0' in cast(cast(m.c_price as numeric) as varchar)) > (char_length(cast(cast(m.c_price as numeric) as varchar))-2) then replace((cast(cast(m.c_price as numeric) as varchar)), '.0', '') else cast(cast(m.c_price as numeric) as varchar) end from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} order by m.datetime_utc desc limit 1) c_price
						 , (select case when position('.0' in cast(cast(m.l_price as numeric) as varchar)) > (char_length(cast(cast(m.l_price as numeric) as varchar))-2) then replace((cast(cast(m.l_price as numeric) as varchar)), '.0', '') else cast(cast(m.l_price as numeric) as varchar) end from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} order by cast(m.l_price as numeric) limit 1) l_price
						 , (select case when position('.0' in cast(cast(m.h_price as numeric) as varchar)) > (char_length(cast(cast(m.h_price as numeric) as varchar))-2) then replace((cast(cast(m.h_price as numeric) as varchar)), '.0', '') else cast(cast(m.h_price as numeric) as varchar) end from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} order by cast(m.h_price as numeric) desc limit 1) h_price
						 , (select substring(m.datetime_kst, 12, 5) from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} order by cast(m.l_price as numeric) limit 1) lower_time
						 , (select substring(m.datetime_kst, 12, 5) from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} order by cast(m.h_price as numeric) desc limit 1) higher_time
						 , (select cast(cast(substring(m.datetime_kst, 12, 2) as integer) as varchar)||'시' from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} group by substring(m.datetime_kst, 12, 2) order by sum(cast(m.trade_volume as numeric)) asc limit 1) volum_low_time
						 , (select cast(cast(substring(m.datetime_kst, 12, 2) as integer) as varchar)||'시' from binance_coin_min m where x.coin_ticker = m.coin_ticker and left(m.datetime_utc, 10) = #{date} group by substring(m.datetime_kst, 12, 2) order by sum(cast(m.trade_volume as numeric)) desc limit 1) volum_high_time
						 , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
						       	       from binance_coin_min z 
						       	      where z.coin_ticker = x.coin_ticker
						       	        and left(z.datetime_utc, 10) = #{date}
						       	        and cast(substring(z.datetime_utc, 12,2) as integer) >= 0 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4
						       	      order by z.datetime_utc 
						     	      limit 1), '0') o_price_0_4
				          , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
						          	    from binance_coin_min z 
						          	   where z.coin_ticker = x.coin_ticker
						       	        and left(z.datetime_utc, 10) = #{date}
						       	        and cast(substring(z.datetime_utc, 12,2) as integer) >= 4 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8
						       	      order by z.datetime_utc 
						        	   limit 1), '0') o_price_4_8
				          , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
						          	    from binance_coin_min z 
						          	   where z.coin_ticker = x.coin_ticker
						          	     and left(z.datetime_utc, 10) = #{date}
						          	     and cast(substring(z.datetime_utc, 12,2) as integer) >= 8 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12
						          	   order by z.datetime_utc 
						        	   limit 1), '0') o_price_8_12
				          , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
						          	    from binance_coin_min z 
						          	   where z.coin_ticker = x.coin_ticker
						       	        and left(z.datetime_utc, 10) = #{date}
						       	        and cast(substring(z.datetime_utc, 12,2) as integer) >= 12 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16
						       	      order by z.datetime_utc 
						     	      limit 1), '0') o_price_12_16
				          , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
						          	    from binance_coin_min z 
						          	   where z.coin_ticker = x.coin_ticker
						          	     and left(z.datetime_utc, 10) = #{date}
						          	     and cast(substring(z.datetime_utc, 12,2) as integer) >= 16 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20
						          	   order by z.datetime_utc 
						        	   limit 1), '0') o_price_16_20
				          , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
						       	       from binance_coin_min z 
						       	      where z.coin_ticker = x.coin_ticker
						       	        and left(z.datetime_utc, 10) = #{date}
						       	        and cast(substring(z.datetime_utc, 12,2) as integer) >= 20 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24
						       	      order by z.datetime_utc 
						        	   limit 1), '0') o_price_20_24
				          , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
						          	    from binance_coin_min z 
						          	   where z.coin_ticker = x.coin_ticker
						          	     and left(z.datetime_utc, 10) = #{date}
						          	     and cast(substring(z.datetime_utc, 12,2) as integer) >= 0 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4
						          	   order by z.datetime_utc desc 
						        	   limit 1), '0') c_price_0_4
				          , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
						          	    from binance_coin_min z 
						          	   where z.coin_ticker = x.coin_ticker
						          	     and left(z.datetime_utc, 10) = #{date}
						       	        and cast(substring(z.datetime_utc, 12,2) as integer) >= 4 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8
						          	   order by z.datetime_utc desc 
						     	       limit 1), '0') c_price_4_8
				          , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
						       	        from binance_coin_min z 
						       	       where z.coin_ticker = x.coin_ticker
						       	         and left(z.datetime_utc, 10) = #{date}
						       	         and cast(substring(z.datetime_utc, 12,2) as integer) >= 8 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12
						       	       order by z.datetime_utc desc 
						     	       limit 1), '0') c_price_8_12
				          , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
						       	        from binance_coin_min z 
						       	       where z.coin_ticker = x.coin_ticker
						           	     and left(z.datetime_utc, 10) = #{date}
						           	     and cast(substring(z.datetime_utc, 12,2) as integer) >= 12 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16
						       	       order by z.datetime_utc desc 
						         	   limit 1), '0') c_price_12_16
				           , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
						           	    from binance_coin_min z 
						       	       where z.coin_ticker = x.coin_ticker
						           	     and left(z.datetime_utc, 10) = #{date}
						       	         and cast(substring(z.datetime_utc, 12,2) as integer) >= 16 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20
						       	       order by z.datetime_utc desc 
						     	       limit 1), '0') c_price_16_20
				           , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
						       	        from binance_coin_min z 
						       	       where z.coin_ticker = x.coin_ticker
						       	         and left(z.datetime_utc, 10) = #{date}
						       	         and cast(substring(z.datetime_utc, 12,2) as integer) >= 20 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24
						       	       order by z.datetime_utc desc 
						     	       limit 1), '0') c_price_20_24
				           , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end
						           	     from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 0 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4
						           	    order by cast(z.h_price as numeric) desc
						     	        limit 1), '0') h_price_0_4 
				           , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 4 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8
						       	        order by cast(z.h_price as numeric) desc
						     	        limit 1), '0') h_price_4_8
				           , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end 
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 8 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12
						       	        order by cast(z.h_price as numeric) desc
						     	        limit 1), '0') h_price_8_12
				           , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end 
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 12 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16
						       	        order by cast(z.h_price as numeric) desc
						     	        limit 1), '0') h_price_12_16
				           , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end 
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 16 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20
						       	        order by cast(z.h_price as numeric) desc
						     	        limit 1), '0') h_price_16_20
				           , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end 
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 20 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24
						       	        order by cast(z.h_price as numeric) desc
						     	        limit 1), '0') h_price_20_24
				           , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end 
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 0 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4
						       	        order by cast(z.l_price as numeric) asc
						     	        limit 1), '0') l_price_0_4
				           , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end
						           	     from binance_coin_min z 
						           	    where z.coin_ticker = x.coin_ticker
						           	      and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 4 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8
						       	        order by cast(z.l_price as numeric) asc
						     	        limit 1), '0') l_price_4_8
				           , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 8 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12
						       	        order by cast(z.l_price as numeric) asc
						     	        limit 1), '0') l_price_8_12
				           , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 12 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16
						       	        order by cast(z.l_price as numeric) asc
						     	        limit 1), '0') l_price_12_16
				           , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 16 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20
						       	        order by cast(z.l_price as numeric) asc
						     	        limit 1), '0') l_price_16_20
				           , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 20 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24
						       	        order by cast(z.l_price as numeric) asc
						     	        limit 1), '0') l_price_20_24
				           , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 0 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4
						       	        group by z.datetime_utc, z.datetime_kst
						     	        order by z.datetime_utc desc
						     	        limit 1), '0') trade_volume_0_4
				           , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						           	      and cast(substring(z.datetime_utc, 12,2) as integer) >= 4 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8
						       	        group by z.datetime_utc, z.datetime_kst
						     	        order by z.datetime_utc desc
						     	        limit 1), '0') trade_volume_4_8
				           , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
						           	     from binance_coin_min z 
						           	    where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 8 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12
						       	        group by z.datetime_utc, z.datetime_kst
						     	        order by z.datetime_utc desc
						     	        limit 1), '0') trade_volume_8_12
				           , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 12 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16
						       	        group by z.datetime_utc, z.datetime_kst
						     	        order by z.datetime_utc desc
						     	        limit 1), '0') trade_volume_12_16
				           , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 16 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20
						       	        group by z.datetime_utc, z.datetime_kst
						     	        order by z.datetime_utc desc
						     	        limit 1), '0') trade_volume_16_20
				           , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
						       	         from binance_coin_min z 
						       	        where z.coin_ticker = x.coin_ticker
						       	          and left(z.datetime_utc, 10) = #{date}
						       	          and cast(substring(z.datetime_utc, 12,2) as integer) >= 20 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24
						       	        group by z.datetime_utc, z.datetime_kst
						     	        order by z.datetime_utc desc
						     	        limit 1), '0') trade_volume_20_24
					  from binance_coin_info x
					 where x.coin_ticker != 'BTCUSDT'
					   and x.coin_delete_yn = 'N'
				) x
			where x.o_price is not null and x.l_price is not null and x.h_price is not null and x.c_price is not null
		) x
		order by case when x.coin_ticker = 'BTCUSDT' then 0 else cast(x.ranking as integer) end
	</insert>
	
	<delete id="CoinAnalysisHourGraphDelete" parameterType="HashMap">
		delete from binance_coin_report_hour_graph where yyyymmdd = #{date}
	</delete>
	
	<insert id="CoinAnalysisHourGraphCreate" parameterType="HashMap">
		insert into binance_coin_report_hour_graph
			(yyyymmdd, coin_ticker, datetime_kst, o_price, c_price, o_c_percent, create_datetime)
		select #{yyyymmdd} yyyymmdd, x.coin_ticker, x.datetime_kst, x.o_price, x.c_price, x.o_c_percent, to_char(now(), 'YYYY-MM-DD HH24:MI:SS')
		  from (
				select y.coin_ticker, (replace(replace(substring(replace(x1.datetime_kst, 'T', ' '), 6, 8),' ', '일 '),'-','월 ') || '시') datetime_kst
					 , case when position('.0' in cast(cast(x1.o_price as numeric) as varchar)) > (char_length(cast(cast(x1.o_price as numeric) as varchar))-2) then replace((cast(cast(x1.o_price as numeric) as varchar)), '.0', '') else cast(cast(x1.o_price as numeric) as varchar) end o_price
					 , case when position('.0' in cast(cast(x2.c_price as numeric) as varchar)) > (char_length(cast(cast(x2.c_price as numeric) as varchar))-2) then replace((cast(cast(x2.c_price as numeric) as varchar)), '.0', '') else cast(cast(x2.c_price as numeric) as varchar) end c_price
					 , cast((ROUND(((cast(x2.c_price as numeric)-cast(x1.o_price as numeric))/cast(x1.o_price as numeric))*100,2)) as varchar) o_c_percent
				  from binance_coin_min x1, binance_coin_min x2,
				  	   (
						select x.coin_ticker, min(x.datetime_kst) min_datetime_kst, max(x.datetime_kst) max_datetime_kst
						  from binance_coin_min x, binance_coin_report_daily y
						 where y.yyyymmdd = #{yyyymmdd}
						   and x.coin_ticker = y.coin_ticker 
						   and x.datetime_utc like '${yyyymmdd}%'
						group by x.coin_ticker, substring(replace(x.datetime_kst, 'T', ' '), 6, 8)
						order by substring(replace(x.datetime_kst, 'T', ' '), 6, 8)
				  	   ) y
				 where x1.coin_ticker = y.coin_ticker
				   and x2.coin_ticker = y.coin_ticker
				   and y.min_datetime_kst = x1.datetime_kst
				   and y.max_datetime_kst = x2.datetime_kst 
				 order by (replace(replace(substring(replace(x1.datetime_kst, 'T', ' '), 6, 8),' ', '일 '),'-','월 ') || '시')
		  	   ) x
		 order by x.coin_ticker, x.datetime_kst
	</insert>
	
	<delete id="CoinAnalysis4HourGraphDelete" parameterType="HashMap">
		delete from binance_coin_report_4hour_graph where yyyymmdd = #{date}
	</delete>
	
	<insert id="CoinAnalysis4HourGraphCreate" parameterType="HashMap">
		insert into binance_coin_report_4hour_graph
			(yyyymmdd, coin_ticker, datetime_kst, o_price, c_price, o_c_percent, create_datetime)
		select #{yyyymmdd} yyyymmdd, x.coin_ticker, x.datetime_kst, x.o_price, x.c_price, x.o_c_percent, to_char(now(), 'YYYY-MM-DD HH24:MI:SS')
		  from (
				select y.coin_ticker, (replace(replace(substring(replace(x1.datetime_kst, 'T', ' '), 6, 8),' ', '일 '),'-','월 ') || '시') datetime_kst
					 , case when position('.0' in cast(cast(x1.o_price as numeric) as varchar)) > (char_length(cast(cast(x1.o_price as numeric) as varchar))-2) then replace((cast(cast(x1.o_price as numeric) as varchar)), '.0', '') else cast(cast(x1.o_price as numeric) as varchar) end o_price
					 , case when position('.0' in cast(cast(x2.c_price as numeric) as varchar)) > (char_length(cast(cast(x2.c_price as numeric) as varchar))-2) then replace((cast(cast(x2.c_price as numeric) as varchar)), '.0', '') else cast(cast(x2.c_price as numeric) as varchar) end c_price
					 , cast((ROUND(((cast(x2.c_price as numeric)-cast(x1.o_price as numeric))/cast(x1.o_price as numeric))*100,2)) as varchar) o_c_percent
				  from binance_coin_min x1, binance_coin_min x2,
				  	   (
						select x.coin_ticker, min(x.datetime_kst) min_datetime_kst, max(x.datetime_kst) max_datetime_kst
						  from binance_coin_min x, binance_coin_report_daily y
						 where y.yyyymmdd = #{yyyymmdd}
						   and x.coin_ticker = y.coin_ticker 
						   and x.datetime_utc like '${yyyymmdd}%'
						   and cast((substring(replace(x.datetime_kst, 'T', ' '), 12, 2)) as integer) in (9, 10, 11, 12)
						 group by x.coin_ticker
						 union all
						select x.coin_ticker, min(x.datetime_kst) min_datetime_kst, max(x.datetime_kst) max_datetime_kst
						  from binance_coin_min x, binance_coin_report_daily y
						 where y.yyyymmdd = #{yyyymmdd}
						   and x.coin_ticker = y.coin_ticker 
						   and x.datetime_utc like '${yyyymmdd}%'
						   and cast((substring(replace(x.datetime_kst, 'T', ' '), 12, 2)) as integer) in (13, 14, 15, 16)
						 group by x.coin_ticker
						 union all
						select x.coin_ticker, min(x.datetime_kst) min_datetime_kst, max(x.datetime_kst) max_datetime_kst
						  from binance_coin_min x, binance_coin_report_daily y
						 where y.yyyymmdd = #{yyyymmdd}
						   and x.coin_ticker = y.coin_ticker 
						   and x.datetime_utc like '${yyyymmdd}%'
						   and cast((substring(replace(x.datetime_kst, 'T', ' '), 12, 2)) as integer) in (17, 18, 19, 20)
						 group by x.coin_ticker
						 union all
						select x.coin_ticker, min(x.datetime_kst) min_datetime_kst, max(x.datetime_kst) max_datetime_kst
						  from binance_coin_min x, binance_coin_report_daily y
						 where y.yyyymmdd = #{yyyymmdd}
						   and x.coin_ticker = y.coin_ticker 
						   and x.datetime_utc like '${yyyymmdd}%'
						   and cast((substring(replace(x.datetime_kst, 'T', ' '), 12, 2)) as integer) in (21, 22, 23, 0)
						 group by x.coin_ticker
						 union all
						select x.coin_ticker, min(x.datetime_kst) min_datetime_kst, max(x.datetime_kst) max_datetime_kst
						  from binance_coin_min x, binance_coin_report_daily y
						 where y.yyyymmdd = #{yyyymmdd}
						   and x.coin_ticker = y.coin_ticker 
						   and x.datetime_utc like '${yyyymmdd}%'
						   and cast((substring(replace(x.datetime_kst, 'T', ' '), 12, 2)) as integer) in (1, 2, 3, 4)
						 group by x.coin_ticker
						 union all
						select x.coin_ticker, min(x.datetime_kst) min_datetime_kst, max(x.datetime_kst) max_datetime_kst
						  from binance_coin_min x, binance_coin_report_daily y
						 where y.yyyymmdd = #{yyyymmdd}
						   and x.coin_ticker = y.coin_ticker 
						   and x.datetime_utc like '${yyyymmdd}%'
						   and cast((substring(replace(x.datetime_kst, 'T', ' '), 12, 2)) as integer) in (5, 6, 7, 8)
						 group by x.coin_ticker
				  	   ) y
				 where x1.coin_ticker = y.coin_ticker
				   and x2.coin_ticker = y.coin_ticker
				   and y.min_datetime_kst = x1.datetime_kst
				   and y.max_datetime_kst = x2.datetime_kst 
				 order by (replace(replace(substring(replace(x1.datetime_kst, 'T', ' '), 6, 8),' ', '일 '),'-','월 ') || '시')
		  	   ) x
		 order by x.coin_ticker, x.datetime_kst
	</insert>
	
	<delete id="WordPressReportHTMLDelete" parameterType="HashMap">
		delete from binance_coin_report_daily_html where yyyymmdd = #{date}
		   and blog_id in (select blog_id from blog_setting where blog_gubun = 'wordpress')
	</delete>
	
	<insert id="WordPressReportHTMLCreate" parameterType="HashMap">
		insert into binance_coin_report_daily_html
			(yyyymmdd, id, row, col, html, diff_yn, blog_yn, blog_id, create_datetime)
		values
			(#{yyyymmdd}, #{id}, #{row}, #{col}, #{html}, #{diff_yn}, #{blog_yn}, #{blog_id}, to_char(now(), 'YYYY-MM-DD HH24:MI:SS'))
	</insert>
	
	<delete id="TiStoryReportHTMLDelete" parameterType="HashMap">
		delete from binance_coin_report_daily_html where yyyymmdd = #{date}
		   and blog_id in (select blog_id from blog_setting where blog_gubun = 'tistory' and blog_url = 'https://diff2026.tistory.com')
	</delete>
	
	<insert id="TiStoryReportHTMLCreate" parameterType="HashMap">
		insert into binance_coin_report_daily_html
			(yyyymmdd, id, row, col, html, diff_yn, blog_yn, blog_id, create_datetime)
		values
			(#{yyyymmdd}, #{id}, #{row}, #{col}, #{html}, #{diff_yn}, #{blog_yn}, #{blog_id}, to_char(now(), 'YYYY-MM-DD HH24:MI:SS'))
	</insert>
	
	<select id="MainLiveRankList" resultType="HashMap" parameterType="HashMap">
		select cast(ROW_NUMBER() OVER (ORDER BY cast(x.o_c_price_rate as numeric) desc) as varchar) AS ranking
			 , x.datetime_kst, x.coin_ticker, x.coin_kor_name, x.o_price, x.c_price, x.o_c_price_rate
		  from (
				select x.datetime_kst, x.coin_ticker, x.coin_kor_name, x.oo_price o_price, x.cc_price c_price
					 , cast((ROUND(((cast(x.cc_price as numeric)-cast(x.oo_price as numeric))/cast(x.oo_price as numeric))*100,1)) as varchar) o_c_price_rate
				  from (
						select x.datetime_kst, x.coin_ticker
							 , (select a.coin_kor_name from binance_coin_info a where a.coin_ticker = x.coin_ticker) coin_kor_name
						     , (select a.o_price from binance_coin_min a where a.coin_ticker = x.coin_ticker and a.datetime_utc ilike '${search_date}%' order by a.datetime_utc asc limit 1) oo_price
							 , (select a.c_price from binance_coin_min a where a.coin_ticker = x.coin_ticker order by a.datetime_utc desc limit 1) cc_price
						  from binance_coin_min x
							 , (select coin_ticker, max(datetime_utc) recently_datetime_utc
						  	      from binance_coin_min
						 	     where datetime_utc ilike '${search_date}%'
							     group by coin_ticker) y
						 where x.coin_ticker = y.coin_ticker
						   and x.datetime_utc = y.recently_datetime_utc
				   		) x
				) x
		 order by cast(x.o_c_price_rate as numeric) desc
	</select>
	
	<select id="ExcelMake_Daily_Result" resultType="HashMap" parameterType="HashMap">
		 select coalesce(cast((sum((select count(*) from binance_coin_day y where x.coin_ticker = y.coin_ticker and x.datetime_kst= y.datetime_kst))) as varchar), '') total_count
		      , coalesce(cast((sum((select count(*) from binance_coin_day y where x.coin_ticker = y.coin_ticker and cast(x.o_price as numeric) <![CDATA[ < ]]> cast(x.c_price as numeric) and x.datetime_kst= y.datetime_kst))) as varchar), '') increase_count
		      , coalesce(cast((sum((select count(*) from binance_coin_day y where x.coin_ticker = y.coin_ticker and cast(x.o_price as numeric) <![CDATA[ > ]]> cast(x.c_price as numeric) and x.datetime_kst= y.datetime_kst))) as varchar), '') degradation_count
		      , coalesce(cast((sum((select count(*) from binance_coin_day y where x.coin_ticker = y.coin_ticker and cast(x.o_price as numeric) <![CDATA[ = ]]> cast(x.c_price as numeric) and x.datetime_kst= y.datetime_kst))) as varchar), '') flat_count
		      , coalesce((select array_to_string(array_agg(replace(y.coin_ticker, 'USDT', '')), ', ') from (select * from binance_coin_day order by coin_ticker) y where cast(y.o_price as numeric) <![CDATA[ < ]]> cast(y.c_price as numeric) and left(y.datetime_utc, 10) = #{date}), '') increase_ticker
		      , coalesce((select array_to_string(array_agg(replace(y.coin_ticker, 'USDT', '')), ', ') from (select * from binance_coin_day order by coin_ticker) y where cast(y.o_price as numeric) <![CDATA[ > ]]> cast(y.c_price as numeric) and left(y.datetime_utc, 10) = #{date}), '') degradation_ticker
		      , coalesce((select array_to_string(array_agg(replace(y.coin_ticker, 'USDT', '')), ', ') from (select * from binance_coin_day order by coin_ticker) y where cast(y.o_price as numeric) <![CDATA[ = ]]> cast(y.c_price as numeric) and left(y.datetime_utc, 10) = #{date}), '') flat_ticker
		   from binance_coin_day x
		  where left(x.datetime_utc, 10) = #{date}	</select>
	
	<select id="ExcelMake_Daily" resultType="HashMap" parameterType="HashMap">
		select x.coin_ticker, x.coin_kor_name, x.coin_eng_name, x.o_price, x.c_price, x.l_price, x.h_price
			 , substring(cast((cast(replace(x.coin_price_min_time,'T',' ') as timestamp) + '9 hour') as varchar), 12, 5) coin_price_min_time
			 , substring(cast((cast(replace(x.coin_price_max_time,'T',' ') as timestamp) + '9 hour') as varchar), 12, 5) coin_price_max_time
			 , substring(cast((cast((replace(x.coin_volume_min_time,'T',' ')||':00:00') as timestamp) + '9 hour') as varchar), 12, 2) coin_volume_min_time
			 , substring(cast((cast((replace(x.coin_volume_max_time,'T',' ')||':00:00') as timestamp) + '9 hour') as varchar), 12, 2) coin_volume_max_time
			 , cast((ROUND(((cast(x.c_price as numeric)-cast(x.o_price as numeric))/cast(x.o_price as numeric))*100,1)) as varchar) open_close_rate
			 , cast((cast(x.c_price as numeric)-cast(x.o_price as numeric)) as varchar) open_close_calc
			 , cast(ROUND(((((cast(x.max_price as numeric) - cast(x.min_price as numeric))/ cast(x.min_price as numeric))) * 100), 1) as varchar) lowest_highest_fluctuation
			 , cast((cast(x.max_price as numeric)-cast(x.min_price as numeric)) as varchar) lowest_highest_calc
		  from (
				select x.coin_ticker, y.coin_kor_name, y.coin_eng_name
					 , (select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end  min_price
					      from binance_coin_min z
					     where x.coin_ticker = z.coin_ticker
					       and left(z.datetime_utc, 10) = #{date}
					     order by cast(z.l_price as numeric)
					     limit 1) min_price
					 , (select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end  max_price
					      from binance_coin_min z
					     where x.coin_ticker = z.coin_ticker
					       and left(z.datetime_utc, 10) = #{date}
					     order by cast(z.h_price as numeric) desc
					     limit 1) max_price
					 , (select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
				     	  from binance_coin_min z 
				     	 where x.coin_ticker = z.coin_ticker 
				     	   and left(z.datetime_utc, 10) = #{date}
				     	 order by z.datetime_utc desc 
				     	 limit 1) c_price
				     , (select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
				          from binance_coin_min z 
				         where x.coin_ticker = z.coin_ticker 
				           and left(z.datetime_utc, 10) = #{date}
				         order by z.datetime_utc asc 
				         limit 1) o_price
					 , (select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end 
					 	  from binance_coin_min z
					 	 where x.coin_ticker = z.coin_ticker 
					 	   and left(z.datetime_utc, 10) = #{date}
					 	 order by cast(z.l_price as numeric)
					 	 limit 1) l_price
					 , (select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end 
					 	  from binance_coin_min z 
					 	 where x.coin_ticker = z.coin_ticker 
					 	   and left(z.datetime_utc, 10) = #{date}
					 	 order by cast(z.h_price as numeric) desc
					 	 limit 1) h_price
					 , (select substring(z.datetime_utc, 0, 14)
						  from binance_coin_min z
						 where x.coin_ticker = z.coin_ticker
						   and left(z.datetime_utc, 10) = #{date}
						 group by substring(z.datetime_utc, 0, 14)
						 order by sum(cast(z.trade_volume as numeric)) desc
						 limit 1) coin_volume_max_time
				     , (select substring(z.datetime_utc, 0, 14)
						  from binance_coin_min z
						 where x.coin_ticker = z.coin_ticker
						   and left(z.datetime_utc, 10) = #{date}
						 group by substring(z.datetime_utc, 0, 14)
						 order by sum(cast(z.trade_volume as numeric)) asc
						 limit 1) coin_volume_min_time
					 , (select z.datetime_utc
					      from binance_coin_min z
					     where x.coin_ticker = z.coin_ticker
					       and left(z.datetime_utc, 10) = #{date}
					       and cast(cast(z.l_price as numeric) as varchar) = cast(min(cast(x.l_price as numeric)) as varchar)
					     order by z.datetime_utc
					     limit 1) coin_price_min_time
					 , (select z.datetime_utc
					      from binance_coin_min z
					     where x.coin_ticker = z.coin_ticker
					       and left(z.datetime_utc, 10) = #{date}
					       and cast(cast(z.h_price as numeric) as varchar) = cast(max(cast(x.h_price as numeric)) as varchar)
					     order by z.datetime_utc
					     limit 1) coin_price_max_time
				  from binance_coin_min x, binance_coin_info y
				 where x.coin_ticker = y.coin_ticker
				   and left(x.datetime_utc, 10) = #{date}
				 group by x.coin_ticker, y.coin_kor_name, y.coin_eng_name
		 	   ) x
		  where ((x.coin_price_min_time <![CDATA[ <= ]]> x.coin_price_max_time and x.coin_ticker != 'BTCUSDT') or (x.coin_ticker = 'BTCUSDT'))
		  order by case x.coin_ticker when 'BTCUSDT' then 0 else 1 end
		  	  , ((ROUND(((cast(x.c_price as numeric)-cast(x.o_price as numeric))/cast(x.o_price as numeric))*100,1))+ROUND(((((cast(x.max_price as numeric) - cast(x.min_price as numeric))/ cast(x.min_price as numeric))) * 100), 1)) desc
		  limit 4
	</select>
	
	<select id="ExcelMake_Daily_Sub" resultType="HashMap" parameterType="HashMap">
		  select case when cast(substring(x.datetime_utc, 12,2) as integer) >= 0 and cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4 then '09:00'
			    	  when cast(substring(x.datetime_utc, 12,2) as integer) >= 4 and cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8 then '13:00'
			          when cast(substring(x.datetime_utc, 12,2) as integer) >= 8 and cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12 then '17:00'
			          when cast(substring(x.datetime_utc, 12,2) as integer) >= 12 and cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16 then '21:00'
			          when cast(substring(x.datetime_utc, 12,2) as integer) >= 16 and cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20 then '01:00'
			          when cast(substring(x.datetime_utc, 12,2) as integer) >= 20 and cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24 then '05:00'
			      end day_time
			   , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 0 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4
				       	   order by z.datetime_utc 
				     	   limit 1), '0') o_price_0_4
		       , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 4 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8
				       	   order by z.datetime_utc 
				     	   limit 1), '0') o_price_4_8
		       , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 8 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12
				       	   order by z.datetime_utc 
				     	   limit 1), '0') o_price_8_12
		       , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 12 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16
				       	   order by z.datetime_utc 
				     	   limit 1), '0') o_price_12_16
		       , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 16 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20
				       	   order by z.datetime_utc 
				     	   limit 1), '0') o_price_16_20
		       , coalesce((select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 20 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24
				       	   order by z.datetime_utc 
				     	   limit 1), '0') o_price_20_24
		       , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 0 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4
				       	   order by z.datetime_utc desc 
				     	   limit 1), '0') c_price_0_4
		       , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 4 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8
				       	   order by z.datetime_utc desc 
				     	   limit 1), '0') c_price_4_8
		       , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 8 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12
				       	   order by z.datetime_utc desc 
				     	   limit 1), '0') c_price_8_12
		       , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 12 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16
				       	   order by z.datetime_utc desc 
				     	   limit 1), '0') c_price_12_16
		       , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 16 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20
				       	   order by z.datetime_utc desc 
				     	   limit 1), '0') c_price_16_20
		       , coalesce((select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 20 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24
				       	   order by z.datetime_utc desc 
				     	   limit 1), '0') c_price_20_24
		       , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 0 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4
				       	   order by cast(z.h_price as numeric) desc
				     	   limit 1), '0') h_price_0_4 
		       , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 4 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8
				       	   order by cast(z.h_price as numeric) desc
				     	   limit 1), '0') h_price_4_8
		       , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 8 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12
				       	   order by cast(z.h_price as numeric) desc
				     	   limit 1), '0') h_price_8_12
		       , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 12 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16
				       	   order by cast(z.h_price as numeric) desc
				     	   limit 1), '0') h_price_12_16
		       , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 16 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20
				       	   order by cast(z.h_price as numeric) desc
				     	   limit 1), '0') h_price_16_20
		       , coalesce((select case when position('.0' in cast(cast(z.h_price as numeric) as varchar)) > (char_length(cast(cast(z.h_price as numeric) as varchar))-2) then replace((cast(cast(z.h_price as numeric) as varchar)), '.0', '') else cast(cast(z.h_price as numeric) as varchar) end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 20 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24
				       	   order by cast(z.h_price as numeric) desc
				     	   limit 1), '0') h_price_20_24
		       , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end 
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 0 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4
				       	   order by cast(z.l_price as numeric) asc
				     	   limit 1), '0') l_price_0_4
		       , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 4 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8
				       	   order by cast(z.l_price as numeric) asc
				     	   limit 1), '0') l_price_4_8
		       , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 8 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12
				       	   order by cast(z.l_price as numeric) asc
				     	   limit 1), '0') l_price_8_12
		       , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 12 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16
				       	   order by cast(z.l_price as numeric) asc
				     	   limit 1), '0') l_price_12_16
		       , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 16 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20
				       	   order by cast(z.l_price as numeric) asc
				     	   limit 1), '0') l_price_16_20
		       , coalesce((select case when position('.0' in cast(cast(z.l_price as numeric) as varchar)) > (char_length(cast(cast(z.l_price as numeric) as varchar))-2) then replace((cast(cast(z.l_price as numeric) as varchar)), '.0', '') else cast(cast(z.l_price as numeric) as varchar) end
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 20 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24
				       	   order by cast(z.l_price as numeric) asc
				     	   limit 1), '0') l_price_20_24
		       , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 0 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4
				       	   group by z.datetime_utc, z.datetime_kst
				     	   order by z.datetime_kst desc
				     	   limit 1), '0') trade_volume_0_4
		       , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 4 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8
				       	   group by z.datetime_utc, z.datetime_kst
				     	   order by z.datetime_kst desc
				     	   limit 1), '0') trade_volume_4_8
		       , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 8 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12
				       	   group by z.datetime_utc, z.datetime_kst
				     	   order by z.datetime_kst desc
				     	   limit 1), '0') trade_volume_8_12
		       , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 12 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16
				       	   group by z.datetime_utc, z.datetime_kst
				     	   order by z.datetime_kst desc
				     	   limit 1), '0') trade_volume_12_16
		       , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 16 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20
				       	   group by z.datetime_utc, z.datetime_kst
				     	   order by z.datetime_kst desc
				     	   limit 1), '0') trade_volume_16_20
		       , coalesce((select cast((round(sum(cast(z.trade_volume as numeric)),2)) as varchar)
				       	    from binance_coin_min z 
				       	   where z.coin_ticker = x.coin_ticker
				       	     and left(z.datetime_utc, 10) = #{date}
				       	     and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 20 and cast(substring(z.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24
				       	   group by z.datetime_utc, z.datetime_kst
				     	   order by z.datetime_kst desc
				     	   limit 1), '0') trade_volume_20_24
		    from binance_coin_min x 
		   where x.coin_ticker = #{coin_ticker}
		     and left(x.datetime_utc, 10) = #{date}
		   group by x.coin_ticker, left(x.datetime_utc, 10)
		   		  , case when cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 0 and cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 4 then '09:00'
				    	 when cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 4 and cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 8 then '13:00'
				         when cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 8 and cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 12 then '17:00'
				         when cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 12 and cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 16 then '21:00'
				         when cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 16 and cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 20 then '01:00'
				         when cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ >= ]]> 20 and cast(substring(x.datetime_utc, 12,2) as integer) <![CDATA[ < ]]> 24 then '05:00' end
	</select>
	
	<select id="ExcelMake_Daily_Ranking" resultType="HashMap" parameterType="HashMap">
		select x.coin_ticker, x.coin_name, x.o_price, x.l_price, x.lh_price, x.h_price, x.c_price
			 , x.before_o_price, x.before_l_price, x.before_lh_price, x.before_h_price, x.before_c_price
			 , x.o_c_price_rate, x.before_o_c_price_rate, x.l_h_price_rate, x.before_l_h_price_rate, x.l_lh_price_rate, x.before_l_lh_price_rate
			 , x.ranking, x.before_ranking
		  from (
			select x.coin_ticker, x.coin_kor_name || '[' || x.coin_ticker || ']' coin_name
				 , x.o_price, x.l_price, x.lh_price, x.h_price, x.c_price
				 , x.before_o_price, x.before_l_price, x.before_lh_price, x.before_h_price, x.before_c_price
				 , cast(round((((cast(x.c_price as numeric) - cast(x.o_price as numeric))/cast(x.o_price as numeric))*100),2) as varchar) o_c_price_rate
				 , cast(round((((cast(x.before_c_price as numeric) - cast(x.before_o_price as numeric))/cast(x.before_o_price as numeric))*100),2) as varchar) before_o_c_price_rate
				 , cast(round((((cast(x.h_price as numeric) - cast(x.l_price as numeric))/cast(x.l_price as numeric))*100),2) as varchar) l_h_price_rate
				 , cast(round((((cast(x.before_h_price as numeric) - cast(x.before_l_price as numeric))/cast(x.before_l_price as numeric))*100),2) as varchar) before_l_h_price_rate
				 , cast(round((((cast(x.lh_price as numeric) - cast(x.l_price as numeric))/cast(x.l_price as numeric))*100),2) as varchar) l_lh_price_rate
				 , cast(round((((cast(x.before_lh_price as numeric) - cast(x.before_l_price as numeric))/cast(x.before_l_price as numeric))*100),2) as varchar) before_l_lh_price_rate
				 , '0' ranking
				 , '0' before_ranking
			  from (
					select replace(x.coin_ticker, 'USDT', '') coin_ticker, x.coin_kor_name
						 , (select case when position('.0' in y.o_price) > (char_length(y.o_price)-2) then replace(y.o_price, '.0', '') else y.o_price end
						 	  from binance_coin_min y 
						 	 where y.coin_ticker = x.coin_ticker 
						 	   and left(y.datetime_utc, 10) = #{date}
						 	 order by y.datetime_utc 
						 	 limit 1) o_price
					 	 , (select case when position('.0' in y.l_price) > (char_length(y.l_price)-2) then replace(y.l_price, '.0', '') else y.l_price end
					 	 	  from binance_coin_min y 
					 	 	 where y.coin_ticker = x.coin_ticker 
					 	 	   and left(y.datetime_utc, 10) = #{date}
					 	 	 order by cast(y.l_price as numeric) asc 
					 	 	 limit 1) l_price
					 	 , (select case when position('.0' in z2.h_price) > (char_length(z2.h_price)-2) then replace(z2.h_price, '.0', '') else z2.h_price end
							  from (select z.coin_ticker, z.datetime_utc
									  from binance_coin_min z
									 where z.coin_ticker = x.coin_ticker
									   and left(z.datetime_utc, 10) = #{date}
									 order by cast(z.l_price as numeric)
									 limit 1) z, binance_coin_min z2
							 where z.coin_ticker = z2.coin_ticker  
							   and z2.datetime_utc >= z.datetime_utc
							 order by cast(z2.h_price as numeric) desc
							 limit 1) lh_price
					 	 , (select case when position('.0' in y.h_price) > (char_length(y.h_price)-2) then replace(y.h_price, '.0', '') else y.h_price end
					 	 	  from binance_coin_min y 
					 	 	 where y.coin_ticker = x.coin_ticker 
					 	 	   and left(y.datetime_utc, 10) = #{date}
							 order by cast(y.h_price as numeric) desc
							 limit 1) h_price
					 	 , (select case when position('.0' in y.c_price) > (char_length(y.c_price)-2) then replace(y.c_price, '.0', '') else y.c_price end
					 	      from binance_coin_min y
							 where y.coin_ticker = x.coin_ticker 
							   and left(y.datetime_utc, 10) = #{date}
							 order by y.datetime_utc desc 
							 limit 1) c_price
						 , (select case when position('.0' in y.o_price) > (char_length(y.o_price)-2) then replace(y.o_price, '.0', '') else y.o_price end
						 	  from binance_coin_min y 
						 	 where y.coin_ticker = x.coin_ticker 
						 	   and left(y.datetime_utc, 10) = #{yesterday}
						 	 order by y.datetime_utc 
						 	 limit 1) before_o_price
					 	 , (select case when position('.0' in y.l_price) > (char_length(y.l_price)-2) then replace(y.l_price, '.0', '') else y.l_price end
					 	 	  from binance_coin_min y 
					 	 	 where y.coin_ticker = x.coin_ticker 
					 	 	   and left(y.datetime_utc, 10) = #{yesterday}
					 	 	 order by cast(y.l_price as numeric) asc 
					 	 	 limit 1) before_l_price
					 	 , (select case when position('.0' in z2.h_price) > (char_length(z2.h_price)-2) then replace(z2.h_price, '.0', '') else z2.h_price end
							  from (select z.coin_ticker, z.datetime_utc
									  from binance_coin_min z
									 where z.coin_ticker = x.coin_ticker
									   and left(z.datetime_utc, 10) = #{yesterday}
									 order by cast(z.l_price as numeric)
									 limit 1) z, binance_coin_min z2
							 where z.coin_ticker = z2.coin_ticker  
							   and z2.datetime_utc >= z.datetime_utc
							 order by cast(z2.h_price as numeric) desc
							 limit 1) before_lh_price
					 	 , (select case when position('.0' in y.h_price) > (char_length(y.h_price)-2) then replace(y.h_price, '.0', '') else y.h_price end
					 	 	  from binance_coin_min y 
					 	 	 where y.coin_ticker = x.coin_ticker 
					 	 	   and left(y.datetime_utc, 10) = #{yesterday}
							 order by cast(y.h_price as numeric) desc
							 limit 1) before_h_price
					 	 , (select case when position('.0' in y.c_price) > (char_length(y.c_price)-2) then replace(y.c_price, '.0', '') else y.c_price end
					 	      from binance_coin_min y
							 where y.coin_ticker = x.coin_ticker 
							   and left(y.datetime_utc, 10) = #{yesterday}
							 order by y.datetime_utc desc 
							 limit 1) before_c_price
					  from binance_coin_info x
					 where x.coin_delete_yn = 'N'
					   and x.coin_ticker = 'BTCUSDT'
			 	   ) x
			  where x.o_price != '' and x.l_price != '' and x.h_price != '' and x.c_price != '' and x.before_o_price != '' and x.before_l_price != '' and x.before_h_price != '' and x.before_c_price != ''
			  union all
			select x.coin_ticker, x.coin_kor_name || '[' || x.coin_ticker || ']' coin_name
				 , x.o_price, x.l_price, x.lh_price, x.h_price, x.c_price
				 , x.before_o_price, x.before_l_price, x.before_lh_price, x.before_h_price, x.before_c_price
				 , cast(round((((cast(x.c_price as numeric) - cast(x.o_price as numeric))/cast(x.o_price as numeric))*100),2) as varchar) o_c_price_rate
				 , cast(round((((cast(x.before_c_price as numeric) - cast(x.before_o_price as numeric))/cast(x.before_o_price as numeric))*100),2) as varchar) before_o_c_price_rate
				 , cast(round((((cast(x.h_price as numeric) - cast(x.l_price as numeric))/cast(x.l_price as numeric))*100),2) as varchar) l_h_price_rate
				 , cast(round((((cast(x.before_h_price as numeric) - cast(x.before_l_price as numeric))/cast(x.before_l_price as numeric))*100),2) as varchar) before_l_h_price_rate
				 , cast(round((((cast(x.lh_price as numeric) - cast(x.l_price as numeric))/cast(x.l_price as numeric))*100),2) as varchar) l_lh_price_rate
				 , cast(round((((cast(x.before_lh_price as numeric) - cast(x.before_l_price as numeric))/cast(x.before_l_price as numeric))*100),2) as varchar) before_l_lh_price_rate
				 , cast((RANK () OVER (ORDER BY round((((cast(x.c_price as numeric) - cast(x.o_price as numeric))/cast(x.o_price as numeric))*100),2) desc)) as varchar) ranking
				 , cast((RANK () OVER (ORDER BY round((((cast(x.before_c_price as numeric) - cast(x.before_o_price as numeric))/cast(x.before_o_price as numeric))*100),2) desc)) as varchar) before_ranking
			  from (
					select replace(x.coin_ticker, 'USDT', '') coin_ticker, x.coin_kor_name
						 , (select case when position('.0' in y.o_price) > (char_length(y.o_price)-2) then replace(y.o_price, '.0', '') else y.o_price end
						 	  from binance_coin_min y 
						 	 where y.coin_ticker = x.coin_ticker 
						 	   and left(y.datetime_utc, 10) = #{date}
						 	 order by y.datetime_utc 
						 	 limit 1) o_price
					 	 , (select case when position('.0' in y.l_price) > (char_length(y.l_price)-2) then replace(y.l_price, '.0', '') else y.l_price end
					 	 	  from binance_coin_min y 
					 	 	 where y.coin_ticker = x.coin_ticker 
					 	 	   and left(y.datetime_utc, 10) = #{date}
					 	 	 order by cast(y.l_price as numeric) asc 
					 	 	 limit 1) l_price
					 	 , (select case when position('.0' in z2.h_price) > (char_length(z2.h_price)-2) then replace(z2.h_price, '.0', '') else z2.h_price end
							  from (select z.coin_ticker, z.datetime_utc
									  from binance_coin_min z
									 where z.coin_ticker = x.coin_ticker
									   and left(z.datetime_utc, 10) = #{date}
									 order by cast(z.l_price as numeric)
									 limit 1) z, binance_coin_min z2
							 where z.coin_ticker = z2.coin_ticker  
							   and z2.datetime_utc >= z.datetime_utc
							 order by cast(z2.h_price as numeric) desc
							 limit 1) lh_price
					 	 , (select case when position('.0' in y.h_price) > (char_length(y.h_price)-2) then replace(y.h_price, '.0', '') else y.h_price end
					 	 	  from binance_coin_min y 
					 	 	 where y.coin_ticker = x.coin_ticker 
					 	 	   and left(y.datetime_utc, 10) = #{date}
							 order by cast(y.h_price as numeric) desc
							 limit 1) h_price
					 	 , (select case when position('.0' in y.c_price) > (char_length(y.c_price)-2) then replace(y.c_price, '.0', '') else y.c_price end
					 	      from binance_coin_min y
							 where y.coin_ticker = x.coin_ticker 
							   and left(y.datetime_utc, 10) = #{date}
							 order by y.datetime_utc desc 
							 limit 1) c_price
						 , (select case when position('.0' in y.o_price) > (char_length(y.o_price)-2) then replace(y.o_price, '.0', '') else y.o_price end
						 	  from binance_coin_min y 
						 	 where y.coin_ticker = x.coin_ticker 
						 	   and left(y.datetime_utc, 10) = #{yesterday}
						 	 order by y.datetime_utc 
						 	 limit 1) before_o_price
					 	 , (select case when position('.0' in y.l_price) > (char_length(y.l_price)-2) then replace(y.l_price, '.0', '') else y.l_price end
					 	 	  from binance_coin_min y 
					 	 	 where y.coin_ticker = x.coin_ticker 
					 	 	   and left(y.datetime_utc, 10) = #{yesterday}
					 	 	 order by cast(y.l_price as numeric) asc 
					 	 	 limit 1) before_l_price
					 	 , (select case when position('.0' in z2.h_price) > (char_length(z2.h_price)-2) then replace(z2.h_price, '.0', '') else z2.h_price end
							  from (select z.coin_ticker, z.datetime_utc
									  from binance_coin_min z
									 where z.coin_ticker = x.coin_ticker
									   and left(z.datetime_utc, 10) = #{yesterday}
									 order by cast(z.l_price as numeric)
									 limit 1) z, binance_coin_min z2
							 where z.coin_ticker = z2.coin_ticker  
							   and z2.datetime_utc >= z.datetime_utc
							 order by cast(z2.h_price as numeric) desc
							 limit 1) before_lh_price
					 	 , (select case when position('.0' in y.h_price) > (char_length(y.h_price)-2) then replace(y.h_price, '.0', '') else y.h_price end
					 	 	  from binance_coin_min y 
					 	 	 where y.coin_ticker = x.coin_ticker 
					 	 	   and left(y.datetime_utc, 10) = #{yesterday}
							 order by cast(y.h_price as numeric) desc
							 limit 1) before_h_price
					 	 , (select case when position('.0' in y.c_price) > (char_length(y.c_price)-2) then replace(y.c_price, '.0', '') else y.c_price end
					 	      from binance_coin_min y
							 where y.coin_ticker = x.coin_ticker 
							   and left(y.datetime_utc, 10) = #{yesterday}
							 order by y.datetime_utc desc 
							 limit 1) before_c_price
					  from binance_coin_info x
					 where x.coin_delete_yn = 'N'
					   and x.coin_ticker != 'BTCUSDT'
			 	   ) x
			  where x.o_price != '' and x.l_price != '' and x.h_price != '' and x.c_price != '' and x.before_o_price != '' and x.before_l_price != '' and x.before_h_price != '' and x.before_c_price != ''
		  ) x
		 order by cast(x.ranking as integer)
	</select>
	
	<select id="ExcelMake_Weekly_Result" resultType="HashMap" parameterType="HashMap">
		select coalesce(cast(sum(cast(x.total_count as integer)) as varchar), '') total_count
			 , coalesce(cast(sum(cast(x.increase_count as integer)) as varchar), '') increase_count
			 , coalesce(cast(sum(cast(x.degradation_count as integer)) as varchar), '') degradation_count
			 , coalesce(cast(sum(cast(x.flat_count as integer)) as varchar), '') flat_count
			 , coalesce((select array_to_string(array_agg(replace(x.coin_ticker, 'USDT', '')), ', ') from (select * from binance_coin_day order by coin_ticker) x, (select * from binance_coin_day order by coin_ticker) y where x.coin_ticker = y.coin_ticker and left(x.datetime_utc, 10) = #{std_date} and left(y.datetime_utc, 10) = #{end_date} and cast(x.o_price as numeric) <![CDATA[ < ]]> cast(y.c_price as numeric)), '') increase_ticker
	 		 , coalesce((select array_to_string(array_agg(replace(x.coin_ticker, 'USDT', '')), ', ') from (select * from binance_coin_day order by coin_ticker) x, (select * from binance_coin_day order by coin_ticker) y where x.coin_ticker = y.coin_ticker and left(x.datetime_utc, 10) = #{std_date} and left(y.datetime_utc, 10) = #{end_date} and cast(x.o_price as numeric) <![CDATA[ > ]]> cast(y.c_price as numeric)), '') degradation_ticker
	 		 , coalesce((select array_to_string(array_agg(replace(x.coin_ticker, 'USDT', '')), ', ') from (select * from binance_coin_day order by coin_ticker) x, (select * from binance_coin_day order by coin_ticker) y where x.coin_ticker = y.coin_ticker and left(x.datetime_utc, 10) = #{std_date} and left(y.datetime_utc, 10) = #{end_date} and cast(x.o_price as numeric) <![CDATA[ = ]]> cast(y.c_price as numeric)), '') flat_ticker
		  from (
				select '1' as total_count
				     , case when cast(x.o_price as numeric) <![CDATA[ < ]]> cast(x.c_price as numeric) then '1' else '0' end increase_count
				     , case when cast(x.o_price as numeric) <![CDATA[ > ]]> cast(x.c_price as numeric) then '1' else '0' end degradation_count
				     , case when cast(x.o_price as numeric) <![CDATA[ = ]]> cast(x.c_price as numeric) then '1' else '0' end flat_count
				  from (
						select x.coin_ticker
							 , (select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
							 	  from binance_coin_day z 
							 	 where x.coin_ticker = z.coin_ticker 
							 	   and left(z.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
								   and left(z.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
							 	 order by z.datetime_utc desc 
							 	 limit 1) c_price
							 , (select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
							      from binance_coin_day z 
							     where x.coin_ticker = z.coin_ticker 
							       and left(z.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
								   and left(z.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
							     order by z.datetime_utc asc 
							     limit 1) o_price  
						  from binance_coin_day x
						 where left(x.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						   and left(x.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 group by x.coin_ticker
				 		) x
		 	) x
	</select>
	
	<select id="ExcelMake_Weekly" resultType="HashMap" parameterType="HashMap">
		select x.coin_ticker, x.gijun_date, x.coin_kor_name, x.coin_eng_name, x.max_price, x.min_price, x.max_date, x.min_date, x.o_price, x.c_price, x.l_price, x.h_price
			 , coalesce(x.o_c_price_rate_5_date, '') o_c_price_rate_5_date, coalesce(x.o_c_price_rate_10_date, '') o_c_price_rate_10_date, coalesce(x.o_c_price_rate_15_date, '') o_c_price_rate_15_date
	 		 , coalesce(x.o_c_price_rate_20_date, '') o_c_price_rate_20_date, coalesce(x.o_c_price_rate_25_date, '') o_c_price_rate_25_date, coalesce(x.o_c_price_rate_30_date, '') o_c_price_rate_30_date
	 		 , coalesce(cast(x.o_c_price_rate_5_count as varchar), '0') o_c_price_rate_5_count, coalesce(cast(x.o_c_price_rate_10_count as varchar), '0') o_c_price_rate_10_count, coalesce(cast(x.o_c_price_rate_15_count as varchar), '0') o_c_price_rate_15_count
	 		 , coalesce(cast(x.o_c_price_rate_20_count as varchar), '0') o_c_price_rate_20_count, coalesce(cast(x.o_c_price_rate_25_count as varchar), '0') o_c_price_rate_25_count, coalesce(cast(x.o_c_price_rate_30_count as varchar), '0') o_c_price_rate_30_count
			 , cast((ROUND(((cast(x.c_price as numeric)-cast(x.o_price as numeric))/cast(x.o_price as numeric))*100,1)) as varchar) open_close_rate
			 , cast((cast(x.c_price as numeric)-cast(x.o_price as numeric)) as varchar) open_close_calc
			 , cast(ROUND(((((cast(x.max_price as numeric) - cast(x.min_price as numeric))/ cast(x.min_price as numeric))) * 100), 1) as varchar) lowest_highest_fluctuation
			 , cast((cast(x.max_price as numeric)-cast(x.min_price as numeric)) as varchar) lowest_highest_calc
		  from (
				select x.coin_ticker, y.coin_kor_name, y.coin_eng_name
					 , coalesce((select max(replace(a.datetime_kst, ' 09:00:00', '')) 
					 			   from binance_coin_day a 
					 			  where a.coin_ticker = x.coin_ticker 
				 			     <if test='std_date != null and std_date != "" '>
									and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
								 </if>
								 <if test='end_date != null and end_date != "" '>
									and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
								 </if>
					 			    and a.l_price = cast(min(cast(x.l_price as numeric)) as varchar)), '') min_date
			 		 , coalesce((select max(replace(a.datetime_kst, ' 09:00:00', '')) 
			 		 			   from binance_coin_day a 
			 		 			  where a.coin_ticker = x.coin_ticker
			 		 			  <if test='std_date != null and std_date != "" '>
									and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
								  </if>
								  <if test='end_date != null and end_date != "" '>
									and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
								  </if>
			 		 			    and a.h_price = cast(max(cast(x.h_price as numeric)) as varchar)), '') max_date
					 , case when position('.0' in cast(min(cast(x.l_price as numeric)) as varchar)) > (char_length(cast(min(cast(x.l_price as numeric)) as varchar))-2) then replace((cast(min(cast(x.l_price as numeric)) as varchar)), '.0', '') else cast(min(cast(x.l_price as numeric)) as varchar) end  min_price
					 , case when position('.0' in cast(max(cast(x.h_price as numeric)) as varchar)) > (char_length(cast(max(cast(x.h_price as numeric)) as varchar))-2) then replace((cast(max(cast(x.h_price as numeric)) as varchar)), '.0', '') else cast(max(cast(x.h_price as numeric)) as varchar) end  max_price
		             , (select case when position('.0' in z.c_price) > (char_length(z.c_price)-2) then replace(z.c_price, '.0', '') else z.c_price end 
		             	  from binance_coin_day z 
		             	 where x.coin_ticker = z.coin_ticker 
		             	 <if test='std_date != null and std_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
		             	 order by z.datetime_kst desc 
		             	 limit 1) c_price
		             , (select case when position('.0' in z.o_price) > (char_length(z.o_price)-2) then replace(z.o_price, '.0', '') else z.o_price end 
		                  from binance_coin_day z 
		                 where x.coin_ticker = z.coin_ticker 
		                 <if test='std_date != null and std_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
		                 order by z.datetime_kst asc 
		                 limit 1) o_price
					 , (select case when position('.0' in cast(min(cast(z.l_price as numeric)) as varchar)) > (char_length(cast(min(cast(z.l_price as numeric)) as varchar))-2) then replace(cast(min(cast(z.l_price as numeric)) as varchar), '.0', '') else cast(min(cast(z.l_price as numeric)) as varchar) end 
					 	  from binance_coin_day z
					 	 where x.coin_ticker = z.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	 limit 1) l_price
		     		 , (select case when position('.0' in cast(max(cast(z.h_price as numeric)) as varchar)) > (char_length(cast(max(cast(z.h_price as numeric)) as varchar))-2) then replace(cast(max(cast(z.h_price as numeric)) as varchar), '.0', '') else cast(max(cast(z.h_price as numeric)) as varchar) end 
		     		 	  from binance_coin_day z 
		     		 	 where x.coin_ticker = z.coin_ticker 
		     		 	 <if test='std_date != null and std_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(z.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
		     		 	 limit 1) h_price
		 			 , (select replace(a.datetime_kst, ' 09:00:00', '') 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	 order by a.datetime_kst desc 
					 	 limit 1) gijun_date
					 , (select replace(a.datetime_kst, ' 09:00:00', '') 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 5 
					 	 order by a.datetime_kst desc limit 1) o_c_price_rate_5_date
					 , (select replace(a.datetime_kst, ' 09:00:00', '') 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 10 
					 	 order by a.datetime_kst desc limit 1) o_c_price_rate_10_date
					 , (select replace(a.datetime_kst, ' 09:00:00', '') 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 15 
					 	 order by a.datetime_kst desc limit 1) o_c_price_rate_15_date
					 , (select replace(a.datetime_kst, ' 09:00:00', '') 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 20 
					 	 order by a.datetime_kst desc limit 1) o_c_price_rate_20_date
					 , (select replace(a.datetime_kst, ' 09:00:00', '') 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 25 
					 	 order by a.datetime_kst desc limit 1) o_c_price_rate_25_date
					 , (select replace(a.datetime_kst, ' 09:00:00', '') 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 30 
					 	 order by a.datetime_kst desc limit 1) o_c_price_rate_30_date
					 , (select count(*) 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 5) o_c_price_rate_5_count
					 , (select count(*) 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 10) o_c_price_rate_10_count
					 , (select count(*) 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 15) o_c_price_rate_15_count
					 , (select count(*) 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 20) o_c_price_rate_20_count
					 , (select count(*) 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 25) o_c_price_rate_25_count
					 , (select count(*) 
					 	  from binance_coin_day a 
					 	 where x.coin_ticker = a.coin_ticker 
					 	 <if test='std_date != null and std_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
						 </if>
						 <if test='end_date != null and end_date != "" '>
							and left(a.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 </if>
					 	   and cast(a.o_c_price_rate as numeric) <![CDATA[ >= ]]> 30) o_c_price_rate_30_count
				  from binance_coin_day x, binance_coin_info y
				 where x.coin_ticker = y.coin_ticker
				 <if test='std_date != null and std_date != "" '>
					and left(x.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
				 </if>
				 <if test='end_date != null and end_date != "" '>
					and left(x.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
				 </if>
				 <if test='coin_ticker != null and coin_ticker != "" '>
				   and replace(x.coin_ticker, 'USDT', '') in ('${coin_ticker}')
				 </if>
				 group by x.coin_ticker, y.coin_kor_name, y.coin_eng_name
		 	   ) x
		  where ((x.min_date <![CDATA[ <= ]]> x.max_date and x.coin_ticker != 'BTCUSDT') or (x.coin_ticker = 'BTCUSDT'))
		  order by case x.coin_ticker when 'BTCUSDT' then 0 else 1 end
		  	  , ((ROUND(((cast(x.c_price as numeric)-cast(x.o_price as numeric))/cast(x.o_price as numeric))*100,1))+ROUND(((((cast(x.max_price as numeric) - cast(x.min_price as numeric))/ cast(x.min_price as numeric))) * 100), 1)) desc
  		  limit 4
	</select>
	
	<select id="ExcelMake_Weekly_Sub" resultType="HashMap" parameterType="HashMap">
		select replace(x.datetime_kst, ' 09:00:00', '') datetime_kst, x.o_c_price_rate
		 	 , case when position('.0' in x.o_price) > (char_length(x.o_price)-2) then replace(x.o_price, '.0', '') else x.o_price end o_price
		 	 , case when position('.0' in x.c_price) > (char_length(x.c_price)-2) then replace(x.c_price, '.0', '') else x.c_price end c_price
		 	 , case when position('.0' in x.l_price) > (char_length(x.l_price)-2) then replace(x.l_price, '.0', '') else x.l_price end l_price
		 	 , case when position('.0' in x.h_price) > (char_length(x.h_price)-2) then replace(x.h_price, '.0', '') else x.h_price end h_price
	  	  from binance_coin_day x
		 where coin_ticker = #{coin_ticker}
	       and left(x.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
		   and left(x.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
	     order by x.datetime_kst asc
	</select>
	
	<select id="ExcelMake_Weekly_Ranking" resultType="HashMap" parameterType="HashMap">
		select x.coin_ticker, x.coin_name, x.o_price, x.l_price, x.lh_price, x.h_price, x.c_price
			 , x.before_o_price, x.before_l_price, x.before_lh_price, x.before_h_price, x.before_c_price
			 , x.o_c_price_rate, x.before_o_c_price_rate, x.l_h_price_rate, x.before_l_h_price_rate, x.l_lh_price_rate, x.before_l_lh_price_rate
			 , x.ranking, x.before_ranking
		  from (
				select x.coin_ticker, x.coin_kor_name || '[' || x.coin_ticker || ']' coin_name
					 , x.o_price, x.l_price, x.lh_price, x.h_price, x.c_price
					 , coalesce(x.before_o_price, '0') before_o_price, coalesce(x.before_l_price, '0') before_l_price, coalesce(x.before_lh_price, '0') before_lh_price, coalesce(x.before_h_price, '0') before_h_price, coalesce(x.before_c_price, '0') before_c_price
					 , cast(round((((cast(x.c_price as numeric) - cast(x.o_price as numeric))/cast(x.o_price as numeric))*100),2) as varchar) o_c_price_rate
					 , cast(round((((cast(coalesce(x.before_c_price,'0') as numeric) - cast(coalesce(x.before_o_price,'0') as numeric))/cast(coalesce(x.before_o_price, '1') as numeric))*100),2) as varchar) before_o_c_price_rate
					 , cast(round((((cast(x.h_price as numeric) - cast(x.l_price as numeric))/cast(x.l_price as numeric))*100),2) as varchar) l_h_price_rate
					 , cast(round((((cast(coalesce(x.before_h_price,'0') as numeric) - cast(coalesce(x.before_l_price,'0') as numeric))/cast(coalesce(x.before_l_price, '1') as numeric))*100),2) as varchar) before_l_h_price_rate
					 , cast(round((((cast(x.lh_price as numeric) - cast(x.l_price as numeric))/cast(x.l_price as numeric))*100),2) as varchar) l_lh_price_rate
					 , cast(round((((cast(coalesce(x.before_lh_price,'0') as numeric) - cast(coalesce(x.before_l_price,'0') as numeric))/cast(coalesce(x.before_l_price, '1') as numeric))*100),2) as varchar) before_l_lh_price_rate
					 , '0' ranking, '0' before_ranking
				  from (
						select x.coin_ticker, x.coin_kor_name
							 , (select case when position('.0' in y.o_price) > (char_length(y.o_price)-2) then replace(y.o_price, '.0', '') else y.o_price end
							 	  from binance_coin_min y 
							 	 where y.coin_ticker = x.coin_ticker 
							 	   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
							 	 order by y.datetime_utc 
							 	 limit 1) o_price
						 	 , (select case when position('.0' in y.l_price) > (char_length(y.l_price)-2) then replace(y.l_price, '.0', '') else y.l_price end
						 	 	  from binance_coin_min y 
						 	 	 where y.coin_ticker = x.coin_ticker 
						 	 	   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 	 	 order by cast(y.l_price as numeric) asc 
						 	 	 limit 1) l_price
						 	 , (select case when position('.0' in z2.h_price) > (char_length(z2.h_price)-2) then replace(z2.h_price, '.0', '') else z2.h_price end
								  from (select z.coin_ticker, z.datetime_utc
										  from binance_coin_min z
										 where z.coin_ticker = x.coin_ticker
										   and left(z.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
				                 		   and left(z.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
										 order by cast(z.l_price as numeric)
										 limit 1) z, binance_coin_min z2
								 where z.coin_ticker = z2.coin_ticker  
								   and z2.datetime_utc >= z.datetime_utc
								 order by cast(z2.h_price as numeric) desc
								 limit 1) lh_price
						 	 , (select case when position('.0' in y.h_price) > (char_length(y.h_price)-2) then replace(y.h_price, '.0', '') else y.h_price end
						 	 	  from binance_coin_min y 
						 	 	 where y.coin_ticker = x.coin_ticker 
						 	 	   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
								 order by cast(y.h_price as numeric) desc
								 limit 1) h_price
						 	 , (select case when position('.0' in y.c_price) > (char_length(y.c_price)-2) then replace(y.c_price, '.0', '') else y.c_price end
						 	      from binance_coin_min y
								 where y.coin_ticker = x.coin_ticker 
								   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
								 order by y.datetime_utc desc 
								 limit 1) c_price
							 , (select case when position('.0' in y.o_price) > (char_length(y.o_price)-2) then replace(y.o_price, '.0', '') else y.o_price end
							 	  from binance_coin_min y 
							 	 where y.coin_ticker = x.coin_ticker 
							 	   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{past_std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{past_end_date}
							 	 order by y.datetime_utc 
							 	 limit 1) before_o_price
						 	 , (select case when position('.0' in y.l_price) > (char_length(y.l_price)-2) then replace(y.l_price, '.0', '') else y.l_price end
						 	 	  from binance_coin_min y 
						 	 	 where y.coin_ticker = x.coin_ticker 
						 	 	   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{past_std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{past_end_date}
						 	 	 order by cast(y.l_price as numeric) asc 
						 	 	 limit 1) before_l_price
						 	 , (select case when position('.0' in z2.h_price) > (char_length(z2.h_price)-2) then replace(z2.h_price, '.0', '') else z2.h_price end
								  from (select z.coin_ticker, z.datetime_utc
										  from binance_coin_min z
										 where z.coin_ticker = x.coin_ticker
										   and left(z.datetime_utc, 10) <![CDATA[ >= ]]> #{past_std_date}
				                 		   and left(z.datetime_utc, 10) <![CDATA[ <= ]]> #{past_end_date}
										 order by cast(z.l_price as numeric)
										 limit 1) z, binance_coin_min z2
								 where z.coin_ticker = z2.coin_ticker  
								   and z2.datetime_utc >= z.datetime_utc
								 order by cast(z2.h_price as numeric) desc
								 limit 1) before_lh_price
						 	 , (select case when position('.0' in y.h_price) > (char_length(y.h_price)-2) then replace(y.h_price, '.0', '') else y.h_price end
						 	 	  from binance_coin_min y 
						 	 	 where y.coin_ticker = x.coin_ticker 
						 	 	   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{past_std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{past_end_date}
								 order by cast(y.h_price as numeric) desc
								 limit 1) before_h_price
						 	 , (select case when position('.0' in y.c_price) > (char_length(y.c_price)-2) then replace(y.c_price, '.0', '') else y.c_price end
						 	      from binance_coin_min y
								 where y.coin_ticker = x.coin_ticker 
								   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{past_std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{past_end_date}
								 order by y.datetime_utc desc 
								 limit 1) before_c_price
						  from binance_coin_info x
						 where x.coin_delete_yn = 'N'
						   and x.coin_ticker = 'BTCUSDT'
				 	   ) x
				  where x.o_price != '' and x.l_price != '' and x.h_price != '' and x.c_price != ''
				  union all
				  select x.coin_ticker, x.coin_kor_name || '[' || x.coin_ticker || ']' coin_name
					   , x.o_price, x.l_price, x.lh_price, x.h_price, x.c_price
					   , coalesce(x.before_o_price, '0') before_o_price, coalesce(x.before_l_price, '0') before_l_price, coalesce(x.before_lh_price, '0') before_lh_price, coalesce(x.before_h_price, '0') before_h_price, coalesce(x.before_c_price, '0') before_c_price
					   , cast(round((((cast(x.c_price as numeric) - cast(x.o_price as numeric))/cast(x.o_price as numeric))*100),2) as varchar) o_c_price_rate
					   , cast(round((((cast(coalesce(x.before_c_price,'0') as numeric) - cast(coalesce(x.before_o_price,'1') as numeric))/cast(coalesce(x.before_o_price, '1') as numeric))*100),2) as varchar) before_o_c_price_rate
					   , cast(round((((cast(x.h_price as numeric) - cast(x.l_price as numeric))/cast(x.l_price as numeric))*100),2) as varchar) l_h_price_rate
					   , cast(round((((cast(coalesce(x.before_h_price,'0') as numeric) - cast(coalesce(x.before_l_price,'1') as numeric))/cast(coalesce(x.before_l_price, '1') as numeric))*100),2) as varchar) before_l_h_price_rate
					   , cast(round((((cast(x.lh_price as numeric) - cast(x.l_price as numeric))/cast(x.l_price as numeric))*100),2) as varchar) l_lh_price_rate
					   , cast(round((((cast(coalesce(x.before_lh_price,'0') as numeric) - cast(coalesce(x.before_l_price,'1') as numeric))/cast(coalesce(x.before_l_price, '1') as numeric))*100),2) as varchar) before_l_lh_price_rate
					   , cast((RANK () OVER (ORDER BY round((((cast(x.c_price as numeric) - cast(x.o_price as numeric))/cast(x.o_price as numeric))*100),2) desc)) as varchar) ranking
					   , cast((RANK () OVER (ORDER BY round((((cast(coalesce(x.before_c_price, '0') as numeric) - cast(coalesce(x.before_o_price, '0') as numeric))/cast(coalesce(x.before_o_price, '1') as numeric))*100),2) desc)) as varchar) before_ranking
				    from (
						select x.coin_ticker, x.coin_kor_name
							 , (select case when position('.0' in y.o_price) > (char_length(y.o_price)-2) then replace(y.o_price, '.0', '') else y.o_price end
							 	  from binance_coin_min y 
							 	 where y.coin_ticker = x.coin_ticker 
							 	   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
							 	 order by y.datetime_utc 
							 	 limit 1) o_price
						 	 , (select case when position('.0' in y.l_price) > (char_length(y.l_price)-2) then replace(y.l_price, '.0', '') else y.l_price end
						 	 	  from binance_coin_min y 
						 	 	 where y.coin_ticker = x.coin_ticker 
						 	 	   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
						 	 	 order by cast(y.l_price as numeric) asc 
						 	 	 limit 1) l_price
						 	 , (select case when position('.0' in z2.h_price) > (char_length(z2.h_price)-2) then replace(z2.h_price, '.0', '') else z2.h_price end
								  from (select z.coin_ticker, z.datetime_utc
										  from binance_coin_min z
										 where z.coin_ticker = x.coin_ticker
										   and left(z.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
				                 		   and left(z.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
										 order by cast(z.l_price as numeric)
										 limit 1) z, binance_coin_min z2
								 where z.coin_ticker = z2.coin_ticker  
								   and z2.datetime_utc >= z.datetime_utc
								 order by cast(z2.h_price as numeric) desc
								 limit 1) lh_price
						 	 , (select case when position('.0' in y.h_price) > (char_length(y.h_price)-2) then replace(y.h_price, '.0', '') else y.h_price end
						 	 	  from binance_coin_min y 
						 	 	 where y.coin_ticker = x.coin_ticker 
						 	 	   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
								 order by cast(y.h_price as numeric) desc
								 limit 1) h_price
						 	 , (select case when position('.0' in y.c_price) > (char_length(y.c_price)-2) then replace(y.c_price, '.0', '') else y.c_price end
						 	      from binance_coin_min y
								 where y.coin_ticker = x.coin_ticker 
								   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
								 order by y.datetime_utc desc 
								 limit 1) c_price
							 , (select case when position('.0' in y.o_price) > (char_length(y.o_price)-2) then replace(y.o_price, '.0', '') else y.o_price end
							 	  from binance_coin_min y 
							 	 where y.coin_ticker = x.coin_ticker 
							 	   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{past_std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{past_end_date}
							 	 order by y.datetime_utc 
							 	 limit 1) before_o_price
						 	 , (select case when position('.0' in y.l_price) > (char_length(y.l_price)-2) then replace(y.l_price, '.0', '') else y.l_price end
						 	 	  from binance_coin_min y 
						 	 	 where y.coin_ticker = x.coin_ticker 
						 	 	   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{past_std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{past_end_date}
						 	 	 order by cast(y.l_price as numeric) asc 
						 	 	 limit 1) before_l_price
						 	 , (select case when position('.0' in z2.h_price) > (char_length(z2.h_price)-2) then replace(z2.h_price, '.0', '') else z2.h_price end
								  from (select z.coin_ticker, z.datetime_utc
										  from binance_coin_min z
										 where z.coin_ticker = x.coin_ticker
										   and left(z.datetime_utc, 10) <![CDATA[ >= ]]> #{past_std_date}
				                 		   and left(z.datetime_utc, 10) <![CDATA[ <= ]]> #{past_end_date}
										 order by cast(z.l_price as numeric)
										 limit 1) z, binance_coin_min z2
								 where z.coin_ticker = z2.coin_ticker  
								   and z2.datetime_utc >= z.datetime_utc
								 order by cast(z2.h_price as numeric) desc
								 limit 1) before_lh_price
						 	 , (select case when position('.0' in y.h_price) > (char_length(y.h_price)-2) then replace(y.h_price, '.0', '') else y.h_price end
						 	 	  from binance_coin_min y 
						 	 	 where y.coin_ticker = x.coin_ticker 
						 	 	   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{past_std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{past_end_date}
								 order by cast(y.h_price as numeric) desc
								 limit 1) before_h_price
						 	 , (select case when position('.0' in y.c_price) > (char_length(y.c_price)-2) then replace(y.c_price, '.0', '') else y.c_price end
						 	      from binance_coin_min y
								 where y.coin_ticker = x.coin_ticker 
								   and left(y.datetime_utc, 10) <![CDATA[ >= ]]> #{past_std_date}
				                   and left(y.datetime_utc, 10) <![CDATA[ <= ]]> #{past_end_date}
								 order by y.datetime_utc desc 
								 limit 1) before_c_price
						  from binance_coin_info x
						 where x.coin_delete_yn = 'N'
						   and x.coin_ticker != 'BTCUSDT'
				 	   ) x
				  where x.o_price != '' and x.l_price != '' and x.h_price != '' and x.c_price != ''
			) x
		order by cast(x.ranking as integer)
	</select>
	
	<select id="ExcelMake_Monthly_Sub" resultType="HashMap" parameterType="HashMap">
		select replace(x.datetime_kst, ' 09:00:00', '') datetime_kst, x.o_c_price_rate
		 	 , case when position('.0' in x.o_price) > (char_length(x.o_price)-2) then replace(x.o_price, '.0', '') else x.o_price end o_price
		 	 , case when position('.0' in x.c_price) > (char_length(x.c_price)-2) then replace(x.c_price, '.0', '') else x.c_price end c_price
		 	 , case when position('.0' in x.l_price) > (char_length(x.l_price)-2) then replace(x.l_price, '.0', '') else x.l_price end l_price
		 	 , case when position('.0' in x.h_price) > (char_length(x.h_price)-2) then replace(x.h_price, '.0', '') else x.h_price end h_price
	  	  from binance_coin_day x
		 where coin_ticker = #{coin_ticker}
	       and left(x.datetime_utc, 10) <![CDATA[ >= ]]> #{std_date}
		   and left(x.datetime_utc, 10) <![CDATA[ <= ]]> #{end_date}
	     order by cast(x.o_c_price_rate as numeric) desc 
 		 limit 7
	</select>
	
	<update id="BlogUploadLogDelete" parameterType="HashMap">
		update blog_upload_log 
		   set delete_yn = 'Y' 
		 where yyyymmdd = #{yyyymmdd} and gubun = 'binance' 
	</update>
	
	<insert id="BlogUploadLogCreate" parameterType="HashMap">
		insert into blog_upload_log 
			(yyyymmdd, gubun, start_datetime)
		values
			(#{yyyymmdd}, 'binance', (select (cast(current_date as varchar) || ' ' || left(cast(current_time as varchar), 8))))
	</insert>

	<update id="BlogUploadLogUpdate" parameterType="HashMap">
		update blog_upload_log 
		<if test='log_number == "1" '>
		   set datetime_1st = (select (cast(current_date as varchar) || ' ' || left(cast(current_time as varchar), 8)))
		</if>
		<if test='log_number == "2" '>
		   set datetime_2nd = (select (cast(current_date as varchar) || ' ' || left(cast(current_time as varchar), 8)))
		</if>
		<if test='log_number == "3" '>
		   set datetime_3rd = (select (cast(current_date as varchar) || ' ' || left(cast(current_time as varchar), 8)))
		</if>
		<if test='log_number == "4" '>
		   set datetime_4th = (select (cast(current_date as varchar) || ' ' || left(cast(current_time as varchar), 8))), end_datetime = (select (cast(current_date as varchar) || ' ' || left(cast(current_time as varchar), 8)))
		</if>
		 where yyyymmdd = #{yyyymmdd} and gubun = 'binance' and delete_yn = 'N' 
	</update>
</mapper>